<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>笔记 on kentxxq Blog</title><link>https://kentxxq.com/categories/%E7%AC%94%E8%AE%B0/</link><description>Recent content in 笔记 on kentxxq Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sun, 21 Mar 2021 14:36:00 +0800</lastBuildDate><atom:link href="https://kentxxq.com/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>树莓派recalbox实践</title><link>https://kentxxq.com/contents/%E6%A0%91%E8%8E%93%E6%B4%BErecalbox%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 21 Mar 2021 14:36:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%A0%91%E8%8E%93%E6%B4%BErecalbox%E5%AE%9E%E8%B7%B5/</guid><description>买了树莓派4b的4gb版本，就是因为哪怕是要吃灰了，我也可以把家里那个垃圾电视盒子给替换掉。那个电视盒子其实只是是一个运营商送的垃圾盒子，通过电视猫之类的app来看电视，还特别多的广告。所以有了今天先把这个吃灰救星给弄好。这次实践的目的是让这个盒子一定能跑起来，所以后续哪怕出现问题，我也会不定时更新，解决问题
前情提要 键盘或手柄的按键映射请参照最新的文档。我主要以操作步骤为主，只会对极个别操作进行按键说明。
recalbox recalbox简介 这个没什么难的，只要用imager刷入系统就可以了。然后会自动进入操作界面。
recalbox是一个游戏模拟器的合集+kodi媒体中心！是的，都集成到了一起是我选用它的主要原因。
基础设置 中文显示:主菜单=&amp;gt;系统设置=&amp;gt;语言=&amp;gt;确认选中语言 ip地址查看:主菜单=&amp;gt;网络设置=&amp;gt;ip地址 ssh连接:ssh root@ip地址,密码recalboxroot。但是有一点需要注意，recalbox可以看作是一个独立的linux发行版。这意味着你无法使用yum或者apt，也无法安装npm和deb包！ web界面 系统管理界面: 用浏览器访问ip，默认就是访问80端口。其中的控制器模拟界面，对于测试了解手柄非常有用。recalbox游戏 这里我就讲一下大致的步骤吧，下载游戏的网站我也随便贴一个，试过了没问题
下载一个游戏rom包，例如马里奥.nes。这个文件名最后会变成recalbox里面的游戏名！！ 在web界面上传这个文件，重启es服务 nes是nintendo entertainment system的简写，找到这个模拟器，就可以看到游戏了 kodi配置 主菜单=&amp;gt;kodi媒体中心,系统会重启。kodi和recalbox的键盘映射不一定相同！
kodi中文设置 设置齿轮=&amp;gt;interface=&amp;gt;Skin=&amp;gt;Font=&amp;gt;Arial based 同界面下，Regional=&amp;gt;Language=&amp;gt;简体中文 kodi启用插件 启用插件:插件=&amp;gt;我的插件=&amp;gt;PVR客户端=&amp;gt;PVR IPTV Simple Client=&amp;gt;启用
使用直播源 去github上面下载需要的电视直播源文件。 默认recalbox通过SMB协议共享出来了我们需要的文件夹，我们可以直接访问进去。在share/kodi下面新建m3u8文件夹，然后把下载好的直播源文件放进去。 在插件iptv界面进入设置，选择本地文件m3u。 点击kodi开关，退出。然后重新进入kodi 进入电视就可以看是选台看电视了！
todo 直播源工具 有很多的直播源质量不高，主要愿意是直播源有地域之分。你在北方不错的直播源可能到了南方就用不了。所以准备写一个插件来解决这个问题。
目标：抓取知名的直播源，进行测试。生成m3u文件。然后一直用这个源即可。程序预计是一条命令部署在recalbox主机上。</description></item><item><title>树莓派上我淌的坑</title><link>https://kentxxq.com/contents/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E6%88%91%E6%B7%8C%E7%9A%84%E5%9D%91/</link><pubDate>Tue, 16 Mar 2021 22:25:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B8%8A%E6%88%91%E6%B7%8C%E7%9A%84%E5%9D%91/</guid><description>专门记录在树莓派4b-ubuntu-arm64上的疑难杂症。本来是不够写成一篇文章的，但是估计后面还会有坑。先续上吧。
c#程序无法运行 找不到文件或目录 在vs打包中，选择linux-arm选项，提示报错如下:
ubuntu@ubuntu:~/Desktop$ ./TestBuild -bash: ./TestBuild: No such file or directory 原因是arm的打包是分32位和64位的。而默认打包是32位。手动编辑PublishProfile
&amp;lt;RuntimeIdentifier&amp;gt;linux-arm64&amp;lt;/RuntimeIdentifier&amp;gt; 进展 20210316: 开篇</description></item><item><title>树莓派初始化</title><link>https://kentxxq.com/contents/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Sat, 13 Mar 2021 21:36:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>老早以前就对树莓派有了一定的了解，但是觉得也不算特别便宜，就没买。最近因为听说苹果的m1芯片很厉害，于是对arm架构的东西又有了兴趣。未来很多东西都会在云上运行，用户端方面arm的节能和高效就非常厉害了。于是一狠心，开始折腾自己&amp;hellip;
硬件方面 树莓派4b 4gb 32GB的tf存储卡，做硬盘用 读卡器，给tf卡写数据和备份用的 电源线是5V/3A的type-c，也就是说最多15W的功率 一根网线，网口支持千兆哟。我是比较推荐初期先用网线的。网线的稳定性是wifi不能比的，我笔记本宁愿插个转接头都要用网线 上面都是必需品，其他的话例如外壳、风扇、散热片、hdmi线都看情况吧。 刷机 使用imager刷机ubuntu 网上有很多资料都是树莓派自制的系统，但是我比较喜欢统一linux发行版，减小出错概率。所以得刷成ubuntu server 20.04 LTS版本。
直接去官网下载imager，然后安装后。就可以通过图形界面选择需要的系统了。但是因为网络太慢，所以我直接去ubuntu官网下载镜像文件，然后use custom写入tf卡。
关于RecalBox RecalBox是一个独立的系统。支持很多的模拟器，例如psp、Game boy等等。同时重要的一点是内置有kodi。这就变成了一个游戏机+媒体中心。我后面是肯定会刷来玩玩的，家里的电视是通过app来观看的，体验很不好。有想法自己折腾一下。
初始化配置 ssh 通过路由器或者ip扫描工具拿到ip，然后ssh上去会提示修改密码 默认密码是ubuntu 替换国内源 文件位置/etc/apt/sources.list。
可以把之前的备份掉( sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak )，然后手工创建( sudo vi /etc/apt/sources.list )。内容如下
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse 更新: sudo apt update -y</description></item><item><title>关于hugo的SEO优化</title><link>https://kentxxq.com/contents/%E5%85%B3%E4%BA%8Ehugo%E7%9A%84seo%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 27 Feb 2021 15:46:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%85%B3%E4%BA%8Ehugo%E7%9A%84seo%E4%BC%98%E5%8C%96/</guid><description>看了一下历史记录，差不多有好几个月没有写过博客了。。这次就写一下这两天的博客SEO优化设置吧
先说情况 SEO我其实只会在乎GOOGLE的搜索排名，百度的竞价以及使用不友好，实在懒得去搞。
而且我觉得技术方面的SEO，国内的博客园、简书等等权重太高了。各种转载+一句话(链接)博客真的是太多了。
具体步骤 持续的更新博客。现在搜索kentxxq关键字，会发现我的博客已经被谷歌省略了。。可能是因为我很多文章都有大致类似的段落结构+很久没有更新新内容导致的。。 结构化数据又称富媒体。目的是为了让你的文章对爬虫友好。有时候谷歌搜索，会发现一些博客有具体的段落详情。下面就是一个例子。可以看到下面有一些小链接标签，可以帮助用户快速跳转到指定位置。 同时还有东西。这里推荐使用谷歌的富媒体搜索结果测试。
问题来了，为什么我没有弄这个快速链接呢，是因为这是谷歌自动生成的。可以参考如何将我的网页标记为精选摘要。其实还是要你把网站内容做好，相关度做上去才行。 提交sitemap。网上有很多的教程示例，可以参考我的sitemap hugo相关配置 通常我们使用git来管理代码，所以我们需要启用hugo的gitinfo。而如果没有使用git来管理，那么在每篇文章标记好lastmod字段即可。官方默认读取顺序为:git,lastmod,date,publishDate。 站点地图默认hugo会通过自带的模板来生成，如果没有的话，需要参考官方链接。 如何验证 打开我的这个博客页面
你的页面应该有一些基础信息。通常网站都会有 你的页面应该有完整的application/ld+json而其中我觉得最重要的就是需要有发布时间和修改时间！虽然在sitemap里面有lastmod时间，但保险起见，单个页面应该也需要。 内容补充-我的精选摘要 刚发现我博客上部分页面其实是有精选摘要的，所以截图补充一下。再次说明内容才是最重要的，这篇文章在我的博客点击排名是非常靠前的(虽然全站也没几个点击)，谷歌觉得权重比较高，就做了一个小索引在下面。</description></item><item><title>我的k8s之路0-集群操作</title><link>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF0-%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 09 Nov 2020 15:40:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF0-%E9%9B%86%E7%BE%A4%E6%93%8D%E4%BD%9C/</guid><description>前面写了基本的部署，现在来使用kubespray进行收缩扩容。
前提 参考集群部署中的准备工作 移除kube-master和etcd-master节点。节点配置不能放在hosts中的第一个。例如移除node1，则顺序应为nodeX,node1。 worker节点扩容/替换 文件路径kubespray/inventory/mycluster/hosts.ini，添加对应的机器信息 增加节点scale.yml sudo ansible-playbook -i inventory/mycluster/inventory.ini scale.yml -b -v --limit=kube-node-03 移除节点remove-node.yml # 正常移除节点 sudo ansible-playbook -i inventory/mycluster/inventory.ini remove-node.yml -b -v -e node=kube-node-03 # 如果节点不在线，需要添加参数 sudo ansible-playbook -i inventory/mycluster/inventory.ini remove-node.yml -b -v -e node=kube-node-03 reset_nodes=false 把hosts文件中被移除节点信息去掉 master节点扩容/替换 文件路径kubespray/inventory/mycluster/hosts.ini，添加对应的机器信息 增加节点cluster.yml sudo ansible-playbook -i inventory/mycluster/inventory.ini cluster.yml -b -v 重启服务 # 在每台机器上重启k8s_nginx-proxy_nginx-proxy容器 docker ps | grep k8s_nginx-proxy_nginx-proxy | awk &amp;#39;{print $1}&amp;#39; | xargs docker restart 移除节点 # 正常移除节点 sudo ansible-playbook -i inventory/mycluster/inventory.</description></item><item><title>我的k8s之路0-集群部署</title><link>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF0-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</link><pubDate>Sat, 07 Nov 2020 20:12:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF0-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</guid><description>之前写了一些k8s的概念和使用，都是操作级别的。而没有自己安装过。这次就来操作一下。同时网上的中文教程都是坑，拍坑是这篇文章一个要点。
简单介绍 虽然说是集群安装教程，但是我还是使用工具来安装。因为这样其实更贴近生产环境的使用。
如果想要了解如何手动部署。那么理解ansible脚本后，自己优化改进脚本会更有帮助。例如不同的linux发行版会有不同的包名、配置等等。这是你在部署时候要注意到的(都在ansible脚本中能找到)。
准备工作 机器准备 3台机器作为集群。 作用 机器 部署机器 本机wsl master 192.168.0.100 Ubuntu 18.04.3 LTS worker 192.168.0.101 Ubuntu 18.04.3 LTS worker 192.168.0.102 Ubuntu 18.04.3 LTS 本机或者另外一台linux作为部署机。如果和我一样使用的是windows，可以使用wsl解决。 部署机环境准备 生成ssh秘钥并免密登录、安装python、安装ansible 在部署机clone当前最新版(release-2.14)kubespray仓库 进入kubespray文件夹，安装依赖(pip install -r requirements.txt) 集群机器环境准备 # 所有操作均由root用户操作 # 如果是centos则应该关闭firewalld，使用yum安装sshpass # 关闭防火墙 ufw disable # 关闭swap交换内存 swapoff -a # 安装软件 apt install sshpass -y 修改ansible脚本 其实最大的坑就是在这里了。如果不了解ansible和具体部署细节，在大陆地区完全无法正常使用。</description></item><item><title>我的k8s之路2-应用部署</title><link>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF2-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</link><pubDate>Sat, 01 Aug 2020 11:08:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF2-%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</guid><description>这是k8s的第二篇，但是已经时隔一年了。也不知道是k8s变化了，还是我之前的理解不够正确。 不过我看了一眼，觉得上一篇写的一些内容，还是比较浅显易懂的，作为入门速览还不错。不过从这一篇开始，要好好抠细节了。
pod细节 修正上一篇文章说的pod推荐内部只包含单个docker用法。因为一个pod内部拥有多个docker，在很多场景下是非常不错的解决方案。
首先要说明一件事情，既然pod允许内部包含多个docker，而pod内的资源是可以互访的。没有手动挂在共享内容，是如何实现的呢？
pod内部就是一个小集群。通过infra-container来进行连接，也称之为sidecar设计模式。这样设计有一些有点。
单个image的更新，不会让整个pod重启。从而减少了开销。 解决了pod内容器共享资源的问题。pod内的容器读取到的ip，mac地址等网络相关信息，其实都是infra-container的。 方便拓展功能。例如我要加入一个nginx的转发。拿到一个/a的请求，可以在pod内新增一个用来代理的容器。把请求转发到应用容器的/b上。 ReplicaSet和Deployments 这里一次讲2种kind:ReplicaSet,Deployments。
ReplicaSet是用来创建pod的，控制pod的数量、使用的pod版本。
Deployments是一个无状态的应用。他是用来控制各个版本的ReplicaSet。
通过上面来匹配呢？label。
# 查看运行的pods kubectl get pods # 查看运行的replicasets kubectl get replicasets # 查看运行的deployments kubectl get deployments 实例操作 简单示例 apiVersion: v1 kind: Pod metadata: name: myapp labels: name: myapp spec: containers: - name: myapp image: nginx:1.11.1 resources: limits: memory: &amp;#34;128Mi&amp;#34; cpu: &amp;#34;500m&amp;#34; ports: - containerPort: 80 在上面我们写了一个最简单的pod模板：
一个名为myapp的无状态应用，同时通过label:myapp来匹配内容 指定要用nginx:1.11.1镜像 限制了使用的资源 制定了要对集群暴露的端口 模板示例 模板示例不会把所有的参数都列出来。只是会把日常会用到的写出来。</description></item><item><title>linux之limit限制</title><link>https://kentxxq.com/contents/linux%E4%B9%8Blimit%E9%99%90%E5%88%B6/</link><pubDate>Sat, 20 Jun 2020 16:05:00 +0800</pubDate><guid>https://kentxxq.com/contents/linux%E4%B9%8Blimit%E9%99%90%E5%88%B6/</guid><description>介绍相关参数 file-max:系统所有的进程所能打开的最大文件数(文件描述符)
# 查看 cat /proc/sys/fs/file-max # 可在 /etc/sysctl.conf 中修改 # 可通过重启或sysctl -p生效 fs.file-max = 6553560 nr_open:单个进程可以打开的最大文件数
# 查看 cat /proc/sys/fs/nr_open # 可在 /etc/sysctl.conf 中修改 # 可通过重启或sysctl -p生效 fs.nr_open = 65535 nproc:用户能创建最大的进程数
nofile:用户能打开最大的文件数
# 查看用户限制 # 系统默认配置，但会被 limits.d/ 下的内容覆盖 cat /etc/security/limits.conf # 实际生效的设置 cat /etc/security/limits.d/20-nproc.conf # 查看单个进程限制 cat /proc/进程id/limits 示例 用户或组 限制级别 限制类型 值 root soft nofile 65535 root hard nproc 65535 soft超过会有警告 hard严格限制，不会超过此数值 问题现象 指定用户无法登陆，服务异常 # 可能出现的报错 su: cannot set user id resource temporarily unavailable Operation not permitted -bash: ulimit: open files: 无法修改 limit 值: 不允许的操作 因为test环境后台服务都部署在同一台机器，所以默认的4096是不够用的。导致无法继续接收新的请求且无法连接。</description></item><item><title>linux问题记录</title><link>https://kentxxq.com/contents/linux%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 09 Jun 2020 23:53:00 +0800</pubDate><guid>https://kentxxq.com/contents/linux%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid><description>现在操作linux的时间是越来越多，遇到的问题也是越来越多。做一个记录贴吧。
问题记录 服务无权限 报错 在启动mysql、nginx等服务，提示没有权限。查看日志，我发现目录已经都设置成了chmod 777。
90%是selinux的问题！
修复 setenforce 0 永久生效
修改/etc/selinux/config中SELINUX=disabled
拓展知识 apparmor
修改/etc/apparmor.d/usr.sbin.mysqld中的对应服务配置
重启apparmor服务
无法挂载远程目录 sudo mount -t nfs -o nolock,nfsvers=3,vers=3 -o proto=tcp 1.1.1.1:/mnt/package /package/ 报错 mount: 文件系统类型错误、选项错误、172.16.68.153:/mnt/package 上有坏超级块、缺少代码页或助手程序，或其他错误(对某些文件系统(如 nfs、cifs) 您可能需要一款 /sbin/mount.&amp;lt;类型&amp;gt; 助手程序)。有些情况下在 syslog 中可以找到一些有用信息- 请尝试dmesg | tail 这样的命令看看。
修复 sudo yum -y install nfs-utils 更新记录 20200305: 开篇</description></item><item><title>linux常用命令</title><link>https://kentxxq.com/contents/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Tue, 09 Jun 2020 23:47:00 +0800</pubDate><guid>https://kentxxq.com/contents/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>记录一下常用的linux常用命令。
常用命令 tar压缩、解压 # z是使用gzip # v是查看细节 # f是指定文件 # --strip-components=1 去掉一层解压目录 # 打包 tar -czvf dist.tgz dist/ # 解压 tar -xzvf dist.tgz # 打包隐藏文件 # 通过 . 可以打包到隐藏文件 tar -czvf dist.tgz /dad/path/. # 通过上级目录来打包 tar -czvf dist.tgz /data/path # 如果是在当前目录，可以手动指定 tar -czvf dist.tgz tar -zcvf dist.tgz .[!.]* * 时间同步 sudo yum install ntp -y ntpdate pool.ntp.org 清空文件 # 本来可以如此简单 &amp;gt;file.txt # 但是不属于你的文件呢？ sudo bash -c &amp;#34;&amp;gt;file.</description></item><item><title>一个我需要的win10</title><link>https://kentxxq.com/contents/%E4%B8%80%E4%B8%AA%E6%88%91%E9%9C%80%E8%A6%81%E7%9A%84win10/</link><pubDate>Sun, 29 Mar 2020 17:24:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E4%B8%80%E4%B8%AA%E6%88%91%E9%9C%80%E8%A6%81%E7%9A%84win10/</guid><description>把我的MacBook Pro2016带bar款咸鱼线下退掉了。入手了小新pro13的2020款。于是就操作了很多的东西，学到了很多。记录一下吧。
win本前传 为什么要换win本 换电脑我和家里人说了这件事情。都说为什么要换呢？你本来用的是苹果电脑呀。你之前用的是苹果手机呀。当然我还有苹果的AirPods之类的产品。也包括有我的同事不理解。
我大概是从去年2019年想着要换的。
让我有这个想法的原因是我连接省厅的服务器，需要用vpn先连接到内网。而easyconnect对mac支持糟糕至极。我尝试过多次，还是失败了。我都是通过teamviewer去连接公司的win台式机操作的，非常蹩脚的体验。 我体验了netCore。感觉非常不错。对比同级别的java，体验好非常多。一站式解决我所遇到的问题。而win上的支持是比mac要好的。 我从最开始的不屑于微软。到后来github被收购开放免费个人仓库。vscode的超级好用。wsl技术的存在。以及到现在的npm被收购。我觉得我所有喜欢的东西都被微软囊括了。同时体验都非常好，让我开始重新审视微软的一切。并开始喜爱它。 换win本的考量 具体有几点需求：
好一点的屏幕~其实我很希望是15.6的屏幕，但是考虑到便携的问题。所以我的想法转变为可以接受外接一个4k60hz的屏幕 不错的性能~因为我经常需要多开很多的标签页、使用docker、由奢入俭难，不能比mac体验差很多 合理的价格区间~我的第一台mac让我分期了3个月，虽然这几年让我学到了很多知识，但现在再花这个价钱买电脑，我是舍不得的 由于之前我有一台联想的g460电脑，虽然是老古董了。但是却一直用到现在。家里的台式机有部件坏了。于是我妹妹拿着在上网课，并且在通过我的指导，学习一点点python！哈哈。所以我对联想的质量是很有信心的。
对比y9000x和小新pro13，我还是选择了小新。原因是便携。加上typec也可以直出4k60hz，用mx350显卡也不会担心掉帧。价格也便宜了好几百，于是买了传说中的真香机。
win本实际体验 机器体验 性能足够满足我自己的需求。16g的内存对我来说，用起来很放心。 屏幕适配不是太好，但是显示效果不错。 做工确实不是太好，但是我觉得不影响。对我来说，这台电脑比我的mac好用多了。 键盘全是不是太好，但是我也体验了4年的蝶式键盘。适应性很强。。现在觉得半斤八两。 这么多的但是，说明了我充满了妥协呀。是的！因为我想要的是台式机！但是前提是在自己的房子里。所以再来看以后我连接上4k60hz的显示器和其他外设。便会觉得没什么不好的。便携加性能不错更加能触动我。
wsl2 我要换win本，一个很大的原因是大多数情况下。服务器都是linux的。而docker不太适合用来进行linux体验。win上的wsl2完美解决了这个痛点。
实测速度很快，基本可以做到秒起。而docker的edge版本，也支援了wsl2。
可以直接访问宿主机win上面的文件。 可以在linux内使用我的docker命令。 可以通过vscode远程连接到linux内部进行代码开发，和服务器一致的linux开发体验 做任何我想在linux上做的一切。相当于一个windows界面的linux电脑！ 微软大刀阔斧，哪怕是最为厉害的windows也开始了极大的变化。打造了一个我认为最强大的系统，没有之一。程序员有什么理由再嫌弃windows呢？
更好的vs使用体验 vs一直号称宇宙最强ide。同时我看中的可能和大家都不一样。我喜欢的是winform。
众所周知，windows的占有率是极高的。而我自己有一个win本，可以通过winform快速拖拽窗口创建性能非常不错的c#工具。同时可以传阅给亲朋好友。至于其他的跨平台方案。在大多数都是win的现实世界中，没有比他更方便的了。
同时我有用过clion，觉得比起来vs，更难用。如果我要免费学习c/c++知识。我自认为vs是一个更好的平台。有了wsl的加持，还有什么能限制你呢？
edge！ 为什么要单独写出来呢？因为chrome虽然很好。但是也有不好的地方。我来说说我喜欢的地方吧。
edge后续会出一个官方版的兼容ie模式。这一点是chrome没有做，而且不可能会比edge做的更好的地方。 chrome的很多功能都需要科学上网，而edge则不用。 edge比起来chrome更多与底层操作系统，特别是windows的结合。蜜汁体验加成。 chrome的市场份额太大了，已经变成了恶龙。而微软的edge却变成了勇敢的少年。更多更快得对同一标准的支持，提升了作为开发者的体验。 总结 先这样吧。其实在我使用mac的过程中，一直也都没有离开过win本，但是我知道。离开了mac，我估计我就不会再去用macOS了。
因为台式机的性能和游戏是不可替代的。同样时间背景下，苹果通过品牌溢价和其他一些对我而言不适用的开销。不是我想要的。
因为win本已经满足了我的需求。我不会开发专门的ios应用。所以mac不是我的必备。偶尔我也可以租用mac来编译ios代码。
因为在今天的我看来，苹果已经没有了以前那种创新。而微软却在转变。转变成一个无比高效的平台。</description></item><item><title>微信小程序自动化部署</title><link>https://kentxxq.com/contents/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</link><pubDate>Tue, 25 Feb 2020 10:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</guid><description>公司先阶段使用的是通过ansible来进行多服务器的部署。而微信小程序开发者工具官方只放出来了windows和mac版本。
macOS老早就听说虚拟机需要超高的配置，而且也会很卡。自己也没有操作过，对mac的虚拟机没什么兴趣。估计以后也用不大上。否则也不会有那么多人去用黑苹果了。
所以就开始了这次在windows机器上的踩坑之旅。
基本环境介绍 本次操作是在win10上进行的。
远程操作使用的jenkins是Ubuntu系统。
远程操控端Ubuntu环境搭建 默认linux都是有python环境的。但是不一定有pip。这是python的一个包管理工具。很多需要用到的工具包，都需要用pip来进行安装。
操作步骤
在Ubuntu中，可以使用apt install python-pip命令安装。 输入pip命令，确认安装完成。 pip install pywinrm win10被控端环境搭建 由于windows和mac/linux不一样，没有ssh远程连接。所以ansible是通过pywinrm模块，进行操作的。
系统要求
net要3.0以上。在powershell输入$host获取net版本。 powershell也要3.0以上。在powershell输入$psversiontable获得ps版本。 系统推荐使用win10。 操作步骤
set-executionpolicy remotesigned (可以用get-executionpolicy验证) 下载并使用管理员powershell运行此配置脚本 winrm quickconfig 快速配置启用 winrm set winrm/config/service &amp;lsquo;@{AllowUnencrypted=&amp;ldquo;true&amp;rdquo;}&amp;rsquo; winrm set winrm/config/service/auth &amp;lsquo;@{Basic=&amp;ldquo;true&amp;rdquo;}&amp;rsquo; 在ansible脚本内配置变量 [windows] 1.1.1.1 [windows:vars] ansible_ssh_user=username ansible_ssh_pass=password ansible_ssh_port=5985 ansible_winrm_transport=ntlm ansible_connection=winrm ansible_winrm_server_cert_validation=ignore 具体流程 由于很多东西不方便直接贴代码，所以这里列出大概的流程
jenkins拉下代码以后，开始执行ansible脚本。(在jenkins内部把用户名和密码等变量写好，通过&amp;ndash;extra-vars方式传递) 通过win_file模块创建文件夹，win_copy模块拷贝代码到windows机器上。 - name: 拷贝最新代码到win目录 win_copy: src: &amp;#34;/local_workspace_path/&amp;#34; dest: D:\wechat_workspace\{{ build_number }} 用win_command来安装依赖。构建代码同理。 - name: 在win上安装依赖 win_command: cmd.</description></item><item><title>ansible的学习</title><link>https://kentxxq.com/contents/ansible%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Sat, 11 Jan 2020 23:46:00 +0800</pubDate><guid>https://kentxxq.com/contents/ansible%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>ansible是一个比较流行的服务器集群管理软件。在之前我有对比过监控软件，所以了解到ansible。
但是因为监控较弱，加上网上所说的性能问题，没有继续研究下去。只知道基于ssh。所以不需要被控端多做操作。
正好面试的公司现在是基于ansible运维，所以肯定要学学了。
ansible概览 ansible优点
基于python。我也比较熟。 基于ssh实现服务，所以被控端不需要做操作。 有官方的维护，人数使用也多。所以社区庞大，各种模块更加好用。 安装 安装其实还是比较简单的。使用默认linux的包管理器就好。
其中macOS也可以使用brew安装。但是需要指出的是配置文件默认是没有的。
在linux下，默认配置文件都放在/etc/ansible/ansible.cfg目录下。
而macOS则默认没有。可以自建.ansible.cfg文件放到用户目录下。而在文件内有一句inventory = /path/hosts，就是用来指定主机列表的文件。
如果设定没有问题。你就可以使用ansible --version验证配置。
编写hosts文件 这个文件是用来存放主机清单的，其中a=1代表一个变量。是这个主机独享的变量。也可以设置组变量。
[webservers] 1.1.1.1 a=1 1.1.1.2 [webservers:vars] b=2 [dbservers] 2.2.2.1 2.2.2.2 指定主机 第一个参数通常用来指定使用主机。
all代表所有主机 dbservers则代表数据库下面的所有主机清单 其中:代表与，&amp;amp;代表或，!代表非。也可以使用通配符和正则表达式。 常用命令 ansible代表主程序，最常用。 ansible-doc查看文档。 ansible-playbook运行脚本。 常用模块 通过-m参数可以指定使用的模块。
ansible -m ping all可以验证主机是否能联通。
command是默认模块，但是对通配符或者管道符不好。 shell代表使用shell模块。通常shell命令用这个。 script代表脚本模块。在本地写好一个shell文件，然后通过此模块在远程主机上执行，但是要注意目标版本是否和脚本兼容。 copy代表拷贝文件。其中src参数指定文件或目录，dest代表远程目录，mode=000代表权限，owner代表文件所有者。 fetch代表提取文件，相当于反向拷贝。 file可以操作文件。path指定文件路径。state=link配合src和dest则可以设置软连接，absent递归删除，touch文件，directory代表文件夹。 cron代表linux自己的定时任务。job指定命令，name指定名称且禁用的时候必须指定，默认新增、disabled=true可以关掉。 yum安装包。通过name指定包名(可以是被控端的本地rpm)且可以逗号隔开。state默认安装、absent卸载。 service管理服务。 user管理用户。 playbook 前面所说的都是通过单独的命令进行操作，而playbook则属于脚本。完成一系列的操作。
--- - hosts: all remote_user: root tasks: - name: install some package yum: name=sl state=latest notify: updated some package when: ansible_distribution_major_version == &amp;#34;8&amp;#34; name: start some service service: name=nginx state=started handlers: - name: updated some package shell: echo &amp;#34;updated sl package&amp;#34; 上面包含了一个基本的playbook，采用的是yml语法。</description></item><item><title>oracle数据导入导出</title><link>https://kentxxq.com/contents/oracle%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</link><pubDate>Sun, 05 Jan 2020 15:42:00 +0800</pubDate><guid>https://kentxxq.com/contents/oracle%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</guid><description>虽然现在的互联网公司都流行mysql这样的免费数据库。但是在各行各业oracle还是非常主流的选择。无论是否有授权，很多的数据迁移都是在oracle之间进行的。
所以这篇文章用来迁移一下自己的笔记，并进行梳理。
开篇说明 我喜欢东西精简而不出错。所以尽量不给自己找麻烦。
所以很多的命令参数，但是我都没有用上。主要是因为在我的使用过程中，没有解决多余的问题，或者说没有提升体验。
plsql_develop plsql是一个收费软件。但是国内你懂的，非常多的破解和绿色版。在我遇到的公司中，都是统一使用的工具。
特点 适用于数据量不大的操作。非常简便。如果只是几千条数据，甚至我经常复制粘贴来处理日常工作。 有自己的pde格式。可以导出导入tables数据。 同时支持文本导入器。例如打开一个csv文件。然后通过字段映射，导入oracle。 exp和imp 一个历史悠长的工具。但是操作简单，oracle自带。
在我交接数据的过程中，生成dmp结尾文件几乎是统一标准。
特点 适合统一的oracle的环境操作。 你需要关注字符集问题(源数据库字符集、导出端字符集、导入端字符集、目标数据库字符集)。 高版本兼容低版本，但是反之则不然！ exp表模式 # 导出数据。不导出索引。指定导出表名 exp user/pawd rows=y indexes=n file=path/exp.dmp log=exp.log tables=tab1,tab2,tab3 exp用户模式 # 指定导出用户 exp user/pawd owner=user rows=y indexes=n file=exp.dmp log=exp.log exp完全模式 # 需要用高权限用户，然后导出全库。用到的极少。 exp user/pawd rows=y indexes=n full=y file=exp.dmp log=exp.log imp导入方法 # 指定以前的用户名，导入到现在的用户名。不导入索引 # 可以指定导入的表名 # ignore=n 可以忽略创建错误，直接追加数据 # commit=y 可以定量提交。否则会占用大量的回滚空间后一次性提交 # 不加表名默认导入所有。适合用户模式。如果再加上full=y，那么就是全库导入了 imp user/pawd fromuser=user touser=pawd rows=y indexes=n commit=y file=exp.</description></item><item><title>查看linux的相关信息</title><link>https://kentxxq.com/contents/linux%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</link><pubDate>Sat, 04 Jan 2020 23:27:00 +0800</pubDate><guid>https://kentxxq.com/contents/linux%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</guid><description>记录一下linux常用的系统监控命令。
系统相关 系统信息 $ lsb_release -a LSB Version: :core-4.1-amd64:core-4.1-noarch Distributor ID: CentOS Description: CentOS Linux release 8.0.1905 (Core) Release: 8.0.1905 Codename: Core 系统os错误代码查询 perror 24 OS error code 24: Too many open files 服务器硬件 服务器型号 dmidecode | grep &amp;#39;Product Name&amp;#39; 查看主板的序列号 dmidecode | grep &amp;#39;Serial Number&amp;#39; 查看系统序列号 dmidecode -s system-serial-number 查看cpu信息 cat /proc/cpuinfo 现有内存数量和内存大小 dmidecode | grep -A16 &amp;#34;Memory Device&amp;#34; | grep &amp;#34;Size&amp;#34; |sed &amp;#39;s/^[ \t]*//&amp;#39; 查看内存信息 dmidecode -t memory # 或 cat /proc/meminfo 查看OEM信息 dmidecode -t 11 最大支持内存容量 dmidecode | grep &amp;#34;Maximum Capacity&amp;#34; |sed &amp;#34;s/^[ \t]*//&amp;#34; 查看磁盘信息 fdisk -l 监控 系统资源概况 top # glances界面更现代化，但centos需要yum安装，且当下20200206无法直接安装使用 glances 硬盘监控 # io的top命令 iotop 网络流量监控 # 用来进行查看各个网卡的总流量 nload # 用来监控各个进程的流量使用情况 nethogs # 图形化的工具，可以查看具体的端口情况 iptraf-ng 内存监控 # 查看内存使用状态 free -m # 查看内存变化 vmstat 间隔 监控次数 vmstat 2 2 更新 20200206: 新增系统监控</description></item><item><title>centos8的记录</title><link>https://kentxxq.com/contents/centos8%E7%9A%84%E8%AE%B0%E5%BD%95/</link><pubDate>Tue, 31 Dec 2019 16:36:00 +0800</pubDate><guid>https://kentxxq.com/contents/centos8%E7%9A%84%E8%AE%B0%E5%BD%95/</guid><description>centos7从我刚开始接触linux就开始用。所以在我使用的时候，老是不明白为什么会有人喜欢centos6。centos真是万年才更新一次大版本，导致许多的新特性不能使用。而我经常喜欢追热点。。所以这一次我要用上最新的centos8。
心路历程 在我听到rhel8的时候，就开始关注centos8。于是了解到centos总是要晚很多才会发布。而我的服务器因为墙的原因，不过半年我就要换。所以超级想找机会换centos8。
在整个rhel的产品线中，有一些非常有用的小知识。
Fedora是最前沿。非常贴近最新的linux内核主线。体验最新的技术选它肯定没错。并且有大量的红帽工程师处理问题，稳定性和问题修复相当于有了商业支持。我觉得非常适合喜欢rhel系列的用户作为桌面端。
rhel是收费的。在经过上游的一系列排错以后，会选取一个最稳定，特性最实用的版本。用来长期支持。购买了授权以后，会拥有无微不至的关怀。技术人员可以为你从源码级别修复你的疑难杂症。
centos则可以理解为rhel的开源版本。重点是免费。
centos8新特性 包管理yum和dnf 每个linux都有对应的包管理工具。而yum也因为rhel为人熟知。而我之前了解Fedora的过程中，也知道了centos7之后的包管理工具肯定会被dnf所替代。
[root@sgp ~]# which yum /usr/bin/yum [root@sgp ~]# ll /usr/bin/yum lrwxrwxrwx. 1 root root 5 May 14 2019 /usr/bin/yum -&amp;gt; dnf-3 [root@sgp ~]# 可以看到命令没有变，但是已经指向了dnf。所以下面说一下特点。
之前应该是用python2写的，现在开源在github上，用的python3。毕竟python2马上淘汰了，python3是未来。优化也更多。 性能方面说是更快了。其实任何项目重构以后我都认为架构会更合适，性能都会有优化。 可以删除正在使用的内核，升级内核更为方便了。 总体来说全方位都变强了。这也是为什么dnf会完全取代yum的原因。
内核升级 内核升级到了4.18，这也是我为什么要换成centos8的原因。
我的vps是在新加坡的。海外节点网络很是不稳定。bbr特性非常适合我。但是bbr需要内核版本4.9以上才行，所以打知道阿里云有了centOS8，我就打定主意要换。
开启bbr
echo &amp;#34;net.core.default_qdisc=fq&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf echo &amp;#34;net.ipv4.tcp_congestion_control=bbr&amp;#34; &amp;gt;&amp;gt; /etc/sysctl.conf # 生效 sysctl -p # 验证 lsmod | grep bbr 内置python升级 历来python都是linux上不可或缺的一部分。几乎所有的标准版安装，都会带上它。
而之前都是python2，同时因为有大量的脚本和工具使用python2开发的。所以一直以来都是在缓慢推进演变过程。
而现在已经到时候了。许多的linux都升级到了python3。python2眼看就要被停止支持。所以升级也是理所当然的。
自带的是python3命令，3.6.8版本。算是很新的版本了。由于我一直都是使用python3，所以以后在服务器做一些测试调整，就不需要再通过pyenv等等工具来进行版本切换了。
总结 其他方面centOS8还有大量的更新，但都是一些让你体会不明显的改动。比如说更加完好的c/c++标准支持。因为centOS7这么多年走来，通过docker等等技术已经解决得差不多了。</description></item><item><title>csv转xlsx文件</title><link>https://kentxxq.com/contents/csv%E8%BD%ACxlsx%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 17 Dec 2019 11:45:00 +0800</pubDate><guid>https://kentxxq.com/contents/csv%E8%BD%ACxlsx%E6%96%87%E4%BB%B6/</guid><description>Excel是大家办公最常遇到的文件之一。一旦需要具体数据的时候，客户都要求这个文件。
而我用plsql从oracle数据库中查出来以后，一般都是直接导出csv文件。需要手动去wps导入csv，转换成xlsx文件。有时候文件实在是太多了，麻烦。
于是就有了这个文章。
python代码 pyexcel版本 这个版本代码最简单的，缺点就是非常慢。100W行的数据[1,2,3,4][2,3,4,5]&amp;hellip;需要2分钟！
# 你还需要安装pyexcel-xlsx from pyexcel import get_sheet sheet = get_sheet(file_name=&amp;#39;/Users/kentxxq/test.csv&amp;#39;) sheet.save_as(filename=&amp;#39;/Users/kentxxq/test.xlsx&amp;#39;) print(sheet.number_of_rows()) print(&amp;#39;ok&amp;#39;) pyexcelerate版本 这个看了一个它在测试，确实很快。大概60s。还是不太理想。
import time from pyexcelerate import Workbook import csv import os from multiprocessing.pool import Pool def csv_to_xlsx(file): start = time.time() print(&amp;#39;开始处理:&amp;#39;+os.path.split(file)[1]) with open(file, &amp;#39;r&amp;#39;, encoding=&amp;#39;gbk&amp;#39;) as f: lines = list(csv.reader(f)) wb = Workbook() wb.new_sheet(&amp;#39;sheet1&amp;#39;, data=lines) wb.save(file + &amp;#39;.xlsx&amp;#39;) end = time.time() duration = end-start print(os.path.split(file)[1] + &amp;#39;处理完成:&amp;#39; + str(duration) + &amp;#39;秒&amp;#39;) if __name__ == &amp;#39;__main__&amp;#39;: start = time.</description></item><item><title>python技巧-类</title><link>https://kentxxq.com/contents/python%E6%8A%80%E5%B7%A7-%E7%B1%BB/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/python%E6%8A%80%E5%B7%A7-%E7%B1%BB/</guid><description>最近把手上的事情都忙完了。准备来好好巩固自己的python知识。为什么标题是技巧呢，因为这部分是它和其他语言最大的不同，或者说特点。要玩得6，不熟这一些知识点，肯定是不行。
python的类 python可以用函数式编程。也支持面向对象编程。
在使用函数式编程的时候，多数都是用来写脚本。同时这也是python最开始发光发亮的点。但是在处理结构性数据以及架构项目的时候，面向对象的优势就会凸显出来。同时也有很多的黑魔法让你快速完成原型的构造。
先说type函数 我们经常用type函数来查看对象的类型信息。但还有一个用法，就是用type来生成对象。当你在写python class代码的时候，解析器遇到class代码块，就会解析class结构，然后用type来构造对象。
# name代表类名，base代表父类或者说基类，attrs为字典形式，代表属性值。 type(name, base, attrs) type和元类 class TMetaClass(type): def __new__(cls, name, base, attrs): print(&amp;#39;in TMetaClass new&amp;#39;) return type.__new__(cls, name, base, attrs) def __init__(self, object_or_name, bases, dict): print(&amp;#39;in TMetaClass init&amp;#39;) super().__init__(object_or_name, bases, dict) class Person(metaclass=TMetaClass): def __new__(cls): print(&amp;#39;in Person&amp;#39;) return object.__new__(cls) def __init__(self): print(self.__class__.__name__) super().__init__() def test(self): print(&amp;#39;Person test..&amp;#39;) class Man(Person): def __new__(cls): print(&amp;#39;in Man&amp;#39;) return object.__new__(cls) def test(self): print(&amp;#39;Man test..&amp;#39;) print(&amp;#39;-&amp;#39;*20) kentxxq1 = Person() kentxxq1.</description></item><item><title>常用的信息手册</title><link>https://kentxxq.com/contents/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF%E6%89%8B%E5%86%8C/</link><pubDate>Fri, 22 Nov 2019 01:31:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF%E6%89%8B%E5%86%8C/</guid><description> 在整理自己的代码文件，同时也觉得需要自己记录一下常用的模块或者工具才行。比如操作Excel文件，我每次都不记得上次用的是哪个库，为什么那个库好用。
DNS # alibaba 223.5.5.5 223.6.6.6 # BaiduDNS 180.76.76.76 # tencent 119.29.29.29 182.254.116.116 # 114 114.114.114.114 114.114.115.115 # google 8.8.8.8 8.8.4.4 # Cloudflare 1.1.1.1 # boss 1.2.4.8 210.2.4.8</description></item><item><title>补充一些数据结构的知识</title><link>https://kentxxq.com/contents/%E8%A1%A5%E5%85%85%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 04 Nov 2019 01:10:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%A1%A5%E5%85%85%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E7%9F%A5%E8%AF%86/</guid><description>在之前做爬虫练手的时候，去爬的Porn网站。影片简介其中有一项就是影片时长。而在我后来的一段时间，发现很多影片网站是没有时长信息的。要知道影片的时长信息其实是非常重要的，需要作为一个筛选的条件。
于是开始尝试自己来用python编写获取在线视频时长的工具。而后这段时间在看了c和c#相关的知识后，开始有了更为深入的了解。也遇到了一些在python中没有详细了解过的问题。
在线视频现状 现在html5越来越流行，flash则已经确定在2020年后不再更新支持，每次打开chrome都会提醒我这一点。
而html5钦定的视频文件格式，就是mp4文件。所以从mp4文件来入手是非常好的。
mp4是一种文件格式。通过规范后的数据结构编排，生成文件。而软件则通过规范来解码文件，进行画面的绘制和输出。几乎所有的文件都是用c/c++的结构体来进行组装的。所以学习c语言对理解文件结构很有帮助。
可以参考苹果网站的文档查阅规范
我的解决方案 python 一开始我搜索已有的解决方案。
ffmpeg是一个很强的工具。跨平台且可以解析各种文件，但是ffmpeg需要单独部署，且不方便代码移植。我在用python通过命令行来调用的时候，发现速度奇慢。2小时才解析了200多条信息，且会无故hang住。对程序来说，也算是一个黑箱操作。无法调试。
随后发现ffmpeg-python这个库可以帮我操作，但还是觉得麻烦。我需要了解一套新的api，以及它所对应到的ffmpeg接口。
当你在在chrome中通过浏览器打开一个mp4文件的时候，会直接播放。且带有时长。
在之前了解爬虫的过程中，一些难搞的网站，是可以使用selenium来操作的。使用一个真正的浏览器来进行数据采集。于是我进行了尝试。
但是这样的效率同样不高。现在的浏览器越来越复杂和庞大。
那么浏览器是如何获取到时长的呢？肯定是有方法的。我只要了解原理，然后用python写出来即可。
首先需要了解http(s)请求中一个非常重要的header头，Range。
状态码为200系列，代表不同的请求成功了。而你带上&amp;quot;Range&amp;quot;:&amp;quot;bytes=0-7&amp;quot;请求去请求一个在线的mp4文件，正常情况下(大部分服务端都支持)会拿到206的状态码。代表你请求的数据成功了。你拿到了这个mp4前8个字节的数据。
于是我们的需求变成了从mp4文件中获取到存储时长信息的那几个字节。对照之前的苹果文档，我便写出了如下的代码。
# coding:utf-8 import struct import requests class Mp4info: def __init__(self, file): self.file = file self.seek = 0 self.duration = 0 self.s = requests.session() self.timeout = 6 self.s.headers = { &amp;#39;Connection&amp;#39;: &amp;#39;keep-alive&amp;#39;, &amp;#39;Accept&amp;#39;: &amp;#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&amp;#39;, &amp;#39;Accept-Encoding&amp;#39;: &amp;#39;gzip, deflate&amp;#39;, &amp;#39;Accept-Language&amp;#39;: &amp;#39;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&amp;#39;, &amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.</description></item><item><title>起码要能看懂c系列的代码</title><link>https://kentxxq.com/contents/%E8%B5%B7%E7%A0%81%E8%A6%81%E8%83%BD%E7%9C%8B%E6%87%82c%E7%B3%BB%E5%88%97%E7%9A%84%E4%BB%A3%E7%A0%81/</link><pubDate>Thu, 29 Aug 2019 11:35:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%B5%B7%E7%A0%81%E8%A6%81%E8%83%BD%E7%9C%8B%E6%87%82c%E7%B3%BB%E5%88%97%E7%9A%84%E4%BB%A3%E7%A0%81/</guid><description>之前在一些文章里面就有说过。程序员是绕不过JavaScript的，即使有时候会恶心到人。。
而很多硬件的嵌入式开发，算法工程师，底层开发人员则真的可以做一辈子，而免疫JavaScript的侵扰。而JavaScript的每一个改动，都多多少少与c/c++有关。
可以说大神们用c/c++构建了现在数字化的底层逻辑。比c更底层的，晦涩难懂且开发效率低下，甚至人写的代码经常不如c编译器优化后的代码。比c高级的，性能下降概念繁多。和c同级别的，都没有c混得好。事实上c是事实标准。
前言 如果你从来没有了解过编程，而想学习c。那么去搜新手教程慢慢上手。
如果你有其他编程的基础。这篇文章能用来让你快速了解c代码。可以在你不得不去看c代码的时候，看懂他的意图。
基本了解 类型 二进制的c表达，需要用代码实现
# python用0b开头 a = 0b101 八进制
// c用0开头 int a = 08 # python用0o开头 数字0和字母o a = 0o516 十六进制
// c用0x开头 int a = 0x2A # python用0x开头 a = 0x2A 其中int是2个字节。long int是4个字节。
而float是4个字节。double是8个字节。long double是16个字节。注意在计算的时候，可能存在舍入误差。
char一个字符一个字节。
字符串则会比char多出来一个尾部的\0字节。
unsigned则代表没有符号位。例如int类型前面都会有一个符号位。没有符号位则会扩大int的可存储范围
附带补充一点知识。 数组
int a[10]; // 10个长度，空位补0 int b[10]={1,2,3,4,5}; // 自动检测到长度 int b[]={1,2,3,4,5}; 而字符串就这样表示
// 长度会是4，因为后面还有一个\0 char c[]=&amp;#34;C a&amp;#34;; 说几个常用的字符串函数吧
strcat合并 strcpy拷贝 strcmp比较 strlen拿到字符串长度 函数部分 函数其实没什么好说的。记得除了库函数(自带标准库),都要定义一下。才能用。 全局变量默认在静态存储区。 加了static的局部变量也在静态存储区。 register的变量会放在寄存器，会提高性能。 外部变量用extern声明，则可以在代码中使用。 预处理命令 #define PI 3.</description></item><item><title>我的k8s之路1-基本概念</title><link>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link><pubDate>Thu, 04 Jul 2019 11:08:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%88%91%E7%9A%84k8s%E4%B9%8B%E8%B7%AF1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid><description>我现在服务器上的微信，博客笔记，redis等等服务都是用的docker部署。在之前写过部署web服务（可拓展），从现在的观点来看，还是比较落伍的，几乎没有自动化。代码部署/系统维护等等的问题没有考虑进去。而docker就解决了这些问题。
而k8s则是docker在企业实践中的事实标准。
我就用大白话来说说自己的理解和使用吧。
关于k8s 每当出现一个问题，就会出现对应的解决方法。下面是我个人的理解的简化版。
openstack是把一堆硬件资源，整合到一起变成一台超级计算机。在此基础上，虚拟出各种资源。对硬件资源进行了整合。同时方便扩容。
docker解决的是app应用的环境问题。
k8s解决了docker编排，负载均衡，自动拓展等等问题。
openstack是为了让vm无忧无虑的健康运行。k8s则是为你的docker提供完美的环境。
概念 这里我仅列出来我暂时用到的概念。总不能一上来，把文档从头看到尾吧～
Pod Pod是k8s的最小计算单元。最常用的情况就是一个docker容器（同时入门使用也推荐此用法）。
如果像是redis集群这样的应用，每个pod之间可以使用卷功能来进行共享数据。
通常在大型应用的场景下，docker的部署很多都是一台机器运行一个docker容器。
而如果你只有3个节点的k8s集群，你也可以运行3个以上的pod。虽然不推荐这样子，但是k8s首要目的是为了让你的部署方案能成功。
pod中的Controller通过Template来创建pod。
Service Service是pod的逻辑集合。对内进行pod的负载均衡。对外提供访问地址。
Volume Volume为pod提供共享数据卷。
Lable Lable用来区分service/pod等资源。LableSelector用来service/pod之间的对应。
Deployment Deployment它管理ReplicaSets和Pod，并提供声明式更新等功能。
一个pod挂了，应用就挂了。而通过Deployment设置用几个pod来提供服务，确保应用正常运作。
web应用 win10的激活可以自己搭建kms服务器。而并不需要数据库来存储任何信息。 StatefulSet StatefulSet用于持久性的应用程序，有唯一的网络标识符（IP），持久存储，有序的部署、扩展、删除和滚动更新。
redis集群 部署应用后一键回滚，且不影响运行中的应用 Job Job用来执行一次性的任务。可定时。
比如开启100个pod来执行一个cpu密集型的应用。完了存到数据库以后，直接销毁。 示例 apiVersion: apps/v1 kind: Deployment metadata: name: azure-vote-back spec: replicas: 1 selector: matchLabels: app: azure-vote-back template: metadata: labels: app: azure-vote-back spec: nodeSelector: &amp;#34;beta.kubernetes.io/os&amp;#34;: linux containers: - name: azure-vote-back image: redis resources: requests: cpu: 100m memory: 128Mi limits: cpu: 250m memory: 256Mi ports: - containerPort: 6379 name: redis --- apiVersion: v1 kind: Service metadata: name: azure-vote-back spec: ports: - port: 6379 selector: app: azure-vote-back --- apiVersion: apps/v1 kind: Deployment metadata: name: azure-vote-front spec: replicas: 1 selector: matchLabels: app: azure-vote-front template: metadata: labels: app: azure-vote-front spec: nodeSelector: &amp;#34;beta.</description></item><item><title>AspNetCore的初步了解</title><link>https://kentxxq.com/contents/aspnetcore%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</link><pubDate>Thu, 13 Jun 2019 10:21:00 +0800</pubDate><guid>https://kentxxq.com/contents/aspnetcore%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</guid><description>应用无论实现了怎样的效果，总是需要展示的。而web是最方便的展示方法。让我来搭建一个web项目。那我肯定采用前后端分离。
如果要选择用什么语言来进行后端开发。快速开发我一定选择python。而需要性能且服务器数量少的时候，静态语言我会选c#。
所以就选择来初步了解一下net core以及一些语法特性。
文章中很多都只是给到了文档的链接，是因为官方文档非常详细。自己抄过来没有意义，同时链接到的地址也会有最新变化。要学好编程，官方文档是必看的。哪怕是英文版
安装所需工具 Visual Studio是宇宙第一ide这句话，大家也多多少少有过了解了。安装好以后，开发环境就弄好了。
初步搭建 看官方文档的Web API就ok。
C#开发的方便之处 models模块直接自动生成！直接可以配合linq使用。 新增控制器，直接把增删改查都做好了。只需要加入一丢丢的业务逻辑即可！ 如果使用的是Azure云服务，还可以一键上云，也太方便了。。 上面的几点，让我觉得比python开发速度还要快。
C#的委托 根据一点基础的了解。我认为委托让C#有了把函数作为参数传递的解决方案。
C#的匿名函数其实是委托的一种简写。
C#的箭头函数其实就是匿名函数的另一种表达方式。
C#的linq语法可以完全等价转换到箭头函数，也可以说是基于委托实现的。
C#的事件是特殊的委托。
我所遇到的问题 从oracle生成models Scaffold-DbContext &amp;#34;Data Source=(DESCRIPTION =(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST = db_host)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = orcl)));User ID=kentxxq;Password=123456;&amp;#34; Oracle.EntityFrameworkCore -OutputDir Models 如果上面的命令无法识别，执行下面的操作
Install-Package Microsoft.EntityFrameworkCore.Tools 测试API 一直用postman来对后端测试。老是切换来切换去。还得自己一个一个路径来写文档。
然后发现有Swagger。神器啊！
用Nuget安装依赖Swashbuckle.AspNetCore后，在Startup.cs的ConfigureServices加入代码
services.AddSwaggerGen(c =&amp;gt; { c.SwaggerDoc(&amp;#34;v1&amp;#34;, new Info { Title = &amp;#34;My API&amp;#34;, Version = &amp;#34;v1&amp;#34; }); // 还可以给openapi添加xml注释 // 什么是xml注释？就是函数的中文名、每个参数的含义等等。PS: 1591忽略没有写xml注释的警告 // 编辑&amp;lt; project_name&amp;gt;.</description></item><item><title>使用js来帮助加解密信息</title><link>https://kentxxq.com/contents/%E4%BD%BF%E7%94%A8js%E6%9D%A5%E5%B8%AE%E5%8A%A9%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%BF%A1%E6%81%AF/</link><pubDate>Wed, 29 May 2019 09:52:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E4%BD%BF%E7%94%A8js%E6%9D%A5%E5%B8%AE%E5%8A%A9%E5%8A%A0%E8%A7%A3%E5%AF%86%E4%BF%A1%E6%81%AF/</guid><description>编程语言多种多样。但是常见在视野中的，就那么一些。其中js就是一个无法忽视的存在。
自从有了nodejs，前端迅速得开始了自己的工程化道理。各种框架满天飞。号称一切能用js来写的东西，都可以用js写出来。
我本人对js是无感的。论性能没有静态语言好，论快捷没有python好，论黑魔法没有ruby好。要说跨平台展示，也有很多的方案不比js差。
但是你架不住它的确是web的标准。。再怎么不搭理它，你也要懂它。
初衷 最近是一直在看flutter，同时在学着做一个app。以后要是有需要，我起码也有个东西可以展示一下。
现在的网站大多数都进行了反爬虫，反盗链等等处理。算是对自身版权的一种保护措施。无可厚非。也让你在学习的道路上接触到了更多的知识面。
出于学习的目的，我也就要迎难而上了。
html代码被js加密 分析页面 在91porn的视频播放页。
在chrome浏览器中有mp4地址，但是我在抓取完页面以后，没有找到video标签的mp4信息。
原因就在下面这一段
document.write(strencode(&amp;#34;Y31+QVcpMF49ISQcEQIVdn5TEn8xJyV6CBMJTiEHLgIYWSNwO1JWS3Q8BU88TV4sESYmFwQIOhYnFHhxIyYCRTcuflgPGAVXegUkFDkeNDQrWhJtXC8CERcaFAc8JS8vES41RQUKMwF7IDBTejdeSBgQEBM+DB4lGTIdYQBsMwsHVBtFFCUVMCtXVh19dlMc&amp;#34;,&amp;#34;35073qz4grffroXO4azOUodLDj16nSIwU3vAw8128Vn8p4gXrbwmHrwnhP5DmO71Tj/wl+Tn+Rruh/rsr6uY9kXaFORTYNCBEyc1asim+tub4c50UDIkqHGKPzOTc+f2MgA5NbCFgegj&amp;#34;,&amp;#34;Y31+QVcpMF49ISQcEQIVdn5TEn8xJyV6CBMJTiEHLgIYWSNwO1JWS3Q8BU88TV4sESYmFwQIOhYnFHhxIyYCRTcuflgPGAVXegUkFDkeNDQrWhJtXC8CERcaFAc8JS8vES41RQUKMwF7IDBTejdeSBgQEBM+DB4lGTIdYQBsMwsHVBtFFCUVMCtXVh19dlMc&amp;#34;)); 我对js的方法不是很熟，于是谷歌了一下，发现strencode是一个编码库，或者说是一个加密库。
于是我在页面请求的资源中，搜索strencode，定位到了md5.js中。
;var encode_version = &amp;#39;sojson.v5&amp;#39;, lbbpm = &amp;#39;__0x33ad7&amp;#39;, __0x33ad7=[&amp;#39;QMOTw6XDtVE=&amp;#39;,&amp;#39;w5XDgsORw5LCuQ==&amp;#39;,&amp;#39;wojDrWTChFU=&amp;#39;,&amp;#39;dkdJACw=&amp;#39;,&amp;#39;w6zDpXDDvsKVwqA=&amp;#39;,&amp;#39;ZifCsh85fsKaXsOOWg==&amp;#39;,&amp;#39;RcOvw47DghzDuA==&amp;#39;,&amp;#39;w7siYTLCnw==&amp;#39;];(function(_0x94dee0,_0x4a3b74){var _0x588ae7=function(_0x32b32e){while(--_0x32b32e){_0x94dee0[&amp;#39;push&amp;#39;](_0x94dee0[&amp;#39;shift&amp;#39;]());}};_0x588ae7(++_0x4a3b74);}(__0x33ad7,0x8f));var _0x5b60=function(_0x4d4456,_0x5a24e3){_0x4d4456=_0x4d4456-0x0;var _0xa82079=__0x33ad7[_0x4d4456];if(_0x5b60[&amp;#39;initialized&amp;#39;]===undefined){(function(){var _0xef6e0=typeof window!==&amp;#39;undefined&amp;#39;?window:typeof process===&amp;#39;object&amp;#39;&amp;amp;&amp;amp;typeof require===&amp;#39;function&amp;#39;&amp;amp;&amp;amp;typeof global===&amp;#39;object&amp;#39;?global:this;var _0x221728=&amp;#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&amp;#39;;_0xef6e0[&amp;#39;atob&amp;#39;]||(_0xef6e0[&amp;#39;atob&amp;#39;]=function(_0x4bb81e){var _0x1c1b59=String(_0x4bb81e)[&amp;#39;replace&amp;#39;](/=+$/,&amp;#39;&amp;#39;);for(var _0x5e3437=0x0,_0x2da204,_0x1f23f4,_0x3f19c1=0x0,_0x3fb8a7=&amp;#39;&amp;#39;;_0x1f23f4=_0x1c1b59[&amp;#39;charAt&amp;#39;](_0x3f19c1++);~_0x1f23f4&amp;amp;&amp;amp;(_0x2da204=_0x5e3437%0x4?_0x2da204*0x40+_0x1f23f4:_0x1f23f4,_0x5e3437++%0x4)?_0x3fb8a7+=String[&amp;#39;fromCharCode&amp;#39;](0xff&amp;amp;_0x2da204&amp;gt;&amp;gt;(-0x2*_0x5e3437&amp;amp;0x6)):0x0){_0x1f23f4=_0x221728[&amp;#39;indexOf&amp;#39;](_0x1f23f4);}return _0x3fb8a7;});}());var _0x43712e=function(_0x2e9442,_0x305a3a){var _0x3702d8=[],_0x234ad1=0x0,_0xd45a92,_0x5a1bee=&amp;#39;&amp;#39;,_0x4a894e=&amp;#39;&amp;#39;;_0x2e9442=atob(_0x2e9442);for(var _0x67ab0e=0x0,_0x1753b1=_0x2e9442[&amp;#39;length&amp;#39;];_0x67ab0e&amp;lt;_0x1753b1;_0x67ab0e++){_0x4a894e+=&amp;#39;%&amp;#39;+(&amp;#39;00&amp;#39;+_0x2e9442[&amp;#39;charCodeAt&amp;#39;](_0x67ab0e)[&amp;#39;toString&amp;#39;](0x10))[&amp;#39;slice&amp;#39;](-0x2);}_0x2e9442=decodeURIComponent(_0x4a894e);for(var _0x246dd5=0x0;_0x246dd5&amp;lt;0x100;_0x246dd5++){_0x3702d8[_0x246dd5]=_0x246dd5;}for(_0x246dd5=0x0;_0x246dd5&amp;lt;0x100;_0x246dd5++){_0x234ad1=(_0x234ad1+_0x3702d8[_0x246dd5]+_0x305a3a[&amp;#39;charCodeAt&amp;#39;](_0x246dd5%_0x305a3a[&amp;#39;length&amp;#39;]))%0x100;_0xd45a92=_0x3702d8[_0x246dd5];_0x3702d8[_0x246dd5]=_0x3702d8[_0x234ad1];_0x3702d8[_0x234ad1]=_0xd45a92;}_0x246dd5=0x0;_0x234ad1=0x0;for(var _0x39e824=0x0;_0x39e824&amp;lt;_0x2e9442[&amp;#39;length&amp;#39;];_0x39e824++){_0x246dd5=(_0x246dd5+0x1)%0x100;_0x234ad1=(_0x234ad1+_0x3702d8[_0x246dd5])%0x100;_0xd45a92=_0x3702d8[_0x246dd5];_0x3702d8[_0x246dd5]=_0x3702d8[_0x234ad1];_0x3702d8[_0x234ad1]=_0xd45a92;_0x5a1bee+=String[&amp;#39;fromCharCode&amp;#39;](_0x2e9442[&amp;#39;charCodeAt&amp;#39;](_0x39e824)^_0x3702d8[(_0x3702d8[_0x246dd5]+_0x3702d8[_0x234ad1])%0x100]);}return _0x5a1bee;};_0x5b60[&amp;#39;rc4&amp;#39;]=_0x43712e;_0x5b60[&amp;#39;data&amp;#39;]={};_0x5b60[&amp;#39;initialized&amp;#39;]=!![];}var _0x4be5de=_0x5b60[&amp;#39;data&amp;#39;][_0x4d4456];if(_0x4be5de===undefined){if(_0x5b60[&amp;#39;once&amp;#39;]===undefined){_0x5b60[&amp;#39;once&amp;#39;]=!![];}_0xa82079=_0x5b60[&amp;#39;rc4&amp;#39;](_0xa82079,_0x5a24e3);_0x5b60[&amp;#39;data&amp;#39;][_0x4d4456]=_0xa82079;}else{_0xa82079=_0x4be5de;}return _0xa82079;};if(typeof encode_version!==&amp;#39;undefined&amp;#39;&amp;amp;&amp;amp;encode_version===&amp;#39;sojson.v5&amp;#39;){function strencode(_0x50cb35,_0x1e821d){var _0x59f053={&amp;#39;MDWYS&amp;#39;:&amp;#39;0|4|1|3|2&amp;#39;,&amp;#39;uyGXL&amp;#39;:function _0x3726b1(_0x2b01e8,_0x53b357){return _0x2b01e8(_0x53b357);},&amp;#39;otDTt&amp;#39;:function _0x4f6396(_0x33a2eb,_0x5aa7c9){return _0x33a2eb&amp;lt;_0x5aa7c9;},&amp;#39;tPPtN&amp;#39;:function _0x3a63ea(_0x1546a9,_0x3fa992){return _0x1546a9%_0x3fa992;}};var _0xd6483c=_0x59f053[_0x5b60(&amp;#39;0x0&amp;#39;,&amp;#39;cEiQ&amp;#39;)][_0x5b60(&amp;#39;0x1&amp;#39;,&amp;#39;&amp;amp;]Gi&amp;#39;)](&amp;#39;|&amp;#39;),_0x1a3127=0x0;while(!![]){switch(_0xd6483c[_0x1a3127++]){case&amp;#39;0&amp;#39;:_0x50cb35=_0x59f053[_0x5b60(&amp;#39;0x2&amp;#39;,&amp;#39;ofbL&amp;#39;)](atob,_0x50cb35);continue;case&amp;#39;1&amp;#39;:code=&amp;#39;&amp;#39;;continue;case&amp;#39;2&amp;#39;:return _0x59f053[_0x5b60(&amp;#39;0x3&amp;#39;,&amp;#39;mLzQ&amp;#39;)](atob,code);case&amp;#39;3&amp;#39;:for(i=0x0;_0x59f053[_0x5b60(&amp;#39;0x4&amp;#39;,&amp;#39;J2rX&amp;#39;)](i,_0x50cb35[_0x5b60(&amp;#39;0x5&amp;#39;,&amp;#39;Z(CX&amp;#39;)]);i++){k=_0x59f053[&amp;#39;tPPtN&amp;#39;](i,len);code+=String[&amp;#39;fromCharCode&amp;#39;](_0x50cb35[_0x5b60(&amp;#39;0x6&amp;#39;,&amp;#39;s4(u&amp;#39;)](i)^_0x1e821d[&amp;#39;charCodeAt&amp;#39;](k));}continue;case&amp;#39;4&amp;#39;:len=_0x1e821d[_0x5b60(&amp;#39;0x7&amp;#39;,&amp;#39;!Mys&amp;#39;)];continue;}break;}}}else{alert(&amp;#39;&amp;#39;);}; 这一大串密密麻麻/花里胡哨的东西，了解过代码混淆的人，应该就知道是混淆过的代码。
用js工具解析后变成了比较容易理解的代码，这是一个解密的算法实现。格式化后的代码可以跳到解密代码部分查看。
解决办法 到这里，一般有3种方法来继续你的工作
把这一大段的js翻译成dart。缺点是耗时耗力，如果加密算法修改，你可能要重新来过。之前我的python爬虫就是这样的，不过那个加密算法才几行而已。 如果语言有工具支持运行js，那么就好办了。js自己跑js代码肯定没问题。而v8就是用c++写的，c++肯定有库可以调用。java1.8版本也有js引擎。c#则有jint。而python则是调用本机的node环境，速度不理想。而我写flutter没有找到这种方法。 用headless浏览器来解析页面，然后把拿到最终结果。把地址解析出来。在flutter中也就是使用webview插件。缺点很慢很重。 于是我想到了远程api来执行代码。
搭建基于nodejs的web服务 web代码 搜了一下，express貌似在nodejs里是很火的web框架。</description></item><item><title>20190520华为的情况</title><link>https://kentxxq.com/contents/20190520%E5%8D%8E%E4%B8%BA%E7%9A%84%E6%83%85%E5%86%B5/</link><pubDate>Mon, 20 May 2019 21:19:00 +0800</pubDate><guid>https://kentxxq.com/contents/20190520%E5%8D%8E%E4%B8%BA%E7%9A%84%E6%83%85%E5%86%B5/</guid><description>自从改用谷歌搜索以后。开始也慢慢关注世界各地的消息。扩大了很大的视野。知道了很多新的技术和新闻。
贸易战一直对我的生活没有什么实质性的影响，所以也没怎么去了解。貌似去年一年都在互加关税。整了中兴，现在轮到了华为。不过这一次应该是要到了贸易战的关键节点，新闻联播里的表态也是十分强硬。
我也就没事看看纸牌屋什么的，政治这个东西就懒得谈了。还是说说自己对技术的看法吧。
现状 现在靠谱的消息总结一下。
备货量起码6个月以上，网传1-2年的。但应该不会所有的组件都有1-2年，6个月还是肯定没问题。 芯片方面确实有备胎计划，但肯定也不是所有的芯片都能立马上岗。性能和成本肯定会提高不少，有多大的影响还不好说。 终端方面。Android不再提供gms服务，并且停止Android的合作。预计之后的微软/Intel等等公司也会跟进很多东西。甚至是x86架构。 我的看法 事情才刚开始 这个美国的法案才刚刚颁布了几天的时间。一切都没有尘埃落定。毕竟是在贸易战的大背景下。
如果谈妥了贸易战呢？那么这个禁令我觉得是有很大可能性会解除的。
6个月到1年的备货量，如果谈判一直在进行。一切皆有可能。同时对于新软/硬件的研发也有不少的时间。
完全断粮的话 前面说过还是有充足的时间的。我还是偏向乐观的。
大胆猜测到时候硬件资源肯定是有能用的。至于性能下降多少，会增加多少的成本就不好说了。
Android也能继续用。但是没有了gms的服务，在海外市场估计会有很大的问题。在Twitter上有消息说新的机器不能连接谷歌服务。
那么问题来了，新的系统还是如何呢？
新技术 x86的架构不再授权 华为一直在发布自己的服务器。都是arm架构的。虽然在性能上不如Intel和AMD，但是功耗和发热会好一些。
当前的现状是PC平台几乎被Intel和AMD的x86统治。移动端则是ARM的天下。
x86被禁用，也是会对世界各国敲警钟。对于美国的技术标准产生不安全感。
中国有过去ioe计划(IBM的小型机,Oracle的数据库,EMC的高端存储)，其他的国家也有类似的计划。这无疑对美国产生的影响是很负面的。
结论华为也不是不能用。中美双方都是不讨好的。
Android被禁的情况下 现在的手机操作系统iOS和Android双雄争霸。
iOS就别想了，在可预见的一段时间。iOS是苹果的核心竞争力，完全不可能开放。
Android只能是禁用gms服务，补丁以及联合开发。操作系统还是能继续用，没有了自带。用户成本会高不少。
解决的方法也不是没有，拿出自己的备用操作系统。到底如何就不知道了。
继续用Android，自己解决安全问题，那么影响会少很多。用户是否安装gms相关的服务，是用户自己的选择 可以基于webview这样的开源技术，做一个浏览器系统。在国内有微信小程序和快应用，可以提供类似本地app的效果。国外的app有很大一部分h5页面几乎和app做到了相同的功能性。 一个linux的系统。通过使用docker来包装应用。给用户自己选择服务。可以打包好包括gms这样的应用。让第三方来提供。或者是一个完全的新系统，完全不依赖现有生态。不过很难 关于新系统 希望是类fuchsiaOS的系统。但极有可能不是。
华为的荣耀play是最早一批和谷歌测试fuchsiaOS的厂商。如果可以的话，直接上一个类似fuchsiaOS的系统，成为类fuchsiaOS系统的事实标准。拥有话语权就不怕和Android一样虽然开源，但被切断合作还是会凉。 如果新系统只是兼容安卓和web应用，没有自己的特色和生态。走不长远。没有gms服务，只能套一个webview来运行谷歌app的web版本用。 对开发者友好。flutter一次开发，多端运行。并且可以利用现有的生态。新系统的生态如果是空白，不说国外，哪怕是国内的厂商也很难帮忙开发生态。 还有一点，不要老是纯自主，全部来新的。那样很大的概率会死掉。这东西不是zf支持不支持的问题。
chrome浏览器不也是先用的WebKit吗。
linux不也是参考了unix的设计吗。
微软市值第一，不也要拥抱开源生态，拉拢开发者吗。
只要没有被禁的风险，先做起来再扯别的。
总结 本来是打算下载Twitter去搜一下安卓官方账号的。结果被华为给刷屏了。。我有一个姐夫是在华为销售基站这样终端的东西，改天问问他现在什么情况。在我之前的了解来说，在国内市场完全没有什么国产优势。对比爱立信这样的厂商，名气还是会要好一些，领导们比较喜欢。但主要还是技术实力还是服务态度好。不然在国际上的份额不会拿到这么多。
也本没有打算写这么一篇文章。但是为什么要写呢？因为我最近就在学flutter啊，就了解到了安卓。。从现在的情况来看，用js来写大前端，似乎更有优势了。
好多人都在唱衰华为。说什么硬件不行，没想到软件也不行。什么以后买了华为也就是个玩具了。说真的，多数都是繁体中文。我也懒得去看到底是哪里的发言了。
还是去到了android的官方账号下面，看到了不少人的middle finger。觉得在那里才是价值观的商讨。而不是过早带入的主观与偏见。
今天真的是一句代码都没写啊。。有点罪恶感。
去写点代码去了。而且决定以后尽量只写没有许可证问题的语言。</description></item><item><title>flutter的入门之路</title><link>https://kentxxq.com/contents/flutter%E7%9A%84%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF/</link><pubDate>Sun, 19 May 2019 17:30:00 +0800</pubDate><guid>https://kentxxq.com/contents/flutter%E7%9A%84%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF/</guid><description>之前了解了一下xamarin，也写过关于xamarin的一篇记录。而flutter的用途也一样是用于开发跨平台UI。
flutter的编写语言是dart，爸爸是谷歌。所以推崇者比xamarin要多得多。大公司的跟进也更多。
如果连一个hello world都没有写过的话，那怎么能去对比呢？就像现在网上的用户对比手机，连手机都没有，就去云评测？
安装 请参考flutter官网。我反正是一次性就弄好了。
如果弄不好，重装系统或者弄个虚拟机吧。
说真的，开发环境都弄不好的话。说明你对操作系统和语言开发相关的知识太差了。
移动开发的hello world 之前在入坑xamarin初探就有对比各个框架的优劣。
既然是移动开发，那就照样写一个带控制闪光灯的hello world，没想到就坑到了。。
使用现成的依赖包 谷歌搜了一下，发现lamp和torch这两个包可以满足我的需求。
flutter的这些工具包是如何跨平台的呢？
先用android和ios的原生开发语言kolin/java和swift把功能实现好。 然后用dart打包好，提供给用户调用。 而经过我的躺坑，torch的ios编译无法通过。swift的编译不通过。貌似是版本之类问题。
而lamp也一样有坑。ios可以正常使用。Android中无响应。后面发现是因为用了老的api。所以找到了一个别人改进之后的版本。正常完成工作。
添加依赖 pubspec.yaml文件中如下:
dependencies: flutter: sdk: flutter # The following adds the Cupertino Icons font to your application. # Use with the CupertinoIcons class for iOS style icons. cupertino_icons: ^0.1.2 english_words: ^3.1.5 http: ^0.12.0+2 tip_dialog: ^2.0.0 lamp: git: url: https://github.com/a805429509/flutter_lamp.git 其中http是一个公共库上已经存好了的包。
而lamp则是直接导入我github上的地址。
代码实例 首先引入了lamp包。 定义了2个void方法，实现了开灯和关灯。 在页面上有2个按钮，onPressed对应到方法 import &amp;#39;package:flutter/material.</description></item><item><title>我对go语言的了解</title><link>https://kentxxq.com/contents/%E6%88%91%E5%AF%B9go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BA%86%E8%A7%A3/</link><pubDate>Sat, 11 May 2019 16:46:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%88%91%E5%AF%B9go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BA%86%E8%A7%A3/</guid><description>一直刷知乎，有很多go语言的推崇者。不少大企业也有java转go的项目。所以就了解了一下hello world和语法相关的东西。
今天写这个文章的原因，是因为cgo。
go语言简介 我看到的go优点 性能好。不输java。 编译快，且可以生成二进制文件。你的代码部署只需要拷贝上去，执行它。这一点优于c/c++。 静态类型比动态类型更好避免低级错误。优于python/js等。 语言级别的并发。简单的语法。 我看到的go缺点 虽然有不错的标准库，但是对比python/java/js生态方面还是差一些。 nil这个东西无处不在！看过不少代码，都存在这个问题。 如果包含有cgo，不方便交叉编译且编译速度慢。 和c/c++的交互会导致速度变慢。看过一个测试，调用c/c++的包比纯go写的包要慢。这样会让go语言陷入重复造轮子的漩涡。其他语言好用的工具，都会想用go来重写。。 关于交叉编译 概念 交叉编译也就是无论我在何种环境下开发程序，我都可以打包成对应的的二进制程序。
一个纯go项目，我在mac下开发的。可以直接编译成在Windows/iOS/Android/linux下可执行的文件。
如果包含了c代码，则会变得麻烦。
遵循了POSIX标准的C/C++程序源代码，可以直接在Linux/BSD环境下用GCC编译，或者在windows下用Cygwin/MinGW编译(Cygwin、MinGW提供了跨操作系统的兼容编译)。这叫跨操作系统的编译。
常见的一些手机都是arm体系的。而你的开发是在linux之类的x86体系。那么你就需要用到arm-linux-gcc编译器，来把你的代码编译成可执行代码。这叫交叉编译/也就是跨体系的编译。
举例说明,我的项目需要连接oracle数据库。但是没有纯go的连接驱动，必须使用cgo。
纯go的交叉编译 先准备好package
go get gopkg.in/goracle.v2 下载好oracle的免安装客户端
解压以后,放到~/lib/路径下，代码就能找到它了。
sudo cp /Users/kentxxq/kent_file/instantclient_18_1/{libclntsh.dylib.18.1,libclntshcore.dylib.18.1,libons.dylib,libnnz18.dylib,libociei.dylib} ~/lib/ test.go文件代码如下
package main import ( // &amp;#34;database/sql&amp;#34; &amp;#34;fmt&amp;#34; // _ &amp;#34;gopkg.in/goracle.v2&amp;#34; ) func main() { fmt.Println(&amp;#34;Hello, World!&amp;#34;) // db, _ := sql.Open(&amp;#34;goracle&amp;#34;, &amp;#34;username/password@192.168.0.2:1521/orcl&amp;#34;) //// sql.Open在官方文档中有写，可能只是验证了字符串格式。必须使用Ping命令来测试 // if err := db.</description></item><item><title>入坑Xamarin初探</title><link>https://kentxxq.com/contents/%E5%85%A5%E5%9D%91xamarin%E5%88%9D%E6%8E%A2/</link><pubDate>Fri, 10 May 2019 00:46:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%85%A5%E5%9D%91xamarin%E5%88%9D%E6%8E%A2/</guid><description>在之前无意中了解到了linq，被超级方便的语法吸引到了。开始认真了解C#以及微软的现状。
github被微软收购以后开放了免费的无限量私人仓库。C#自举且一系列生态代码完全开源。net core跨平台且目标是替代framework系列。浏览器开始使用chrome相同的内核且融合了ie模式，却被谷歌摆了一道。还有云平台，ide等等一系列的动作。
这些做法让我对微软的好感度急剧攀升。无意间了解到Xamarin，更是让我不得不想叫一句：微软爸爸。
为什么会有这篇文章 在最近了解了一系列微软的技术发展动态后，一个不能停止学习的程序员应该体会到，如果不去了解它(微软的技术栈)，沉溺在公司现有的技术栈，会导致视野越来越小。甚至几年以后，与公司外部世界技术脱轨。
从技术方面来说，微软有这些值得注意的点:
c#/c++/xaramin等等技术的全面开源。可以在使用微软技术栈的同时，更好的学习知识(或者排坑)。 积极拥抱社区，为Chromium内核项目提交代码。发布WSL2支持原生linux内核，秒级启动！同时支持docker技术！ 从net5的blog来看，以后windows会放弃net framework，而使用net core。 随着vs/vsc和微软服务绑定增多，开发越来越方便。vsc remote等理念非常前沿，甚至可以说是未来的开发模式！ 从上面可以得出，学好了微软技术栈在开发中可以有以下优势:
类似java，可以跨平台运行。同时在windows上，可以不用安装运行环境！ 对于普通用户来说，跨平台就是一个伪需求。在xp电脑上能双击打开的exe才是王道。 xaramin可以开发移动端app(iOS/Android)，且拥有庞大的社区。 对比js写的windows客户端，C#性能不用担心。 Xamarin初步了解 一个跨平台UI开发的解决方案。
对比原生语言。同时开发iOS，Android应用，且代码的复用率高。
对比js跨平台。性能有优势。
对比flutter技术。dart是一个不主流的语言。且如果flutter胎死腹中(指fuchsia无法代替安卓)，那你学了dart语言以后，几乎没有用武之地！因为几乎没有公司用dart来编写除flutter以外的项目。
前期准备工作 只需要傻瓜化安装vs，即可完成整个开发环境的搭建。vs官方文档是最好的教程了。且中文！
参见Xamarin官方文档，数据线连接在安卓手机上开启debug模式。点击即可运行。
而iOS则属于排坑之旅了。
排坑之旅 iOS开发 你需要一个mac电脑。或者参考云mac，我没用过，也不推荐这样。 最好有一个iPhone，因为模拟器耗资源，且不方便操作。 装好xcode 新建跨平台应用的时候注意你的应用名称和组织标识符 用Apple ID申请成为开发者。如果你有付费的开发者账号可以按照Xamarin官网的方法来，否则继续往下看。 Xcode随便新建一个项目，关键Bundle Identifier要一致。打开Xcode=&amp;gt;Preferences=&amp;gt;Accounts，。然后添加你自己的账号。Manage Certificates。 7. 回到General，钩上自动signing。team选择自己personal team。等一会就ojbk了！ 8. 回到vs=&amp;gt;左上角kentxxq_app.iOS=&amp;gt;Debug=&amp;gt;你的iPhone,启动项目吧！
生成apk 在生成apk文件的时候，记得选择release来生成。否则apk的大小会非常惊人。
笑容逐渐展露 开始写代码。参考官方文档，试一下闪光灯和语音功能！
为什么呢？因为我记得好久以前iPhone没有自带手电筒的功能，我是通过app下载的。而且一个调用了硬件，语音功能则调用了软件。
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;ContentPage xmlns=&amp;#34;http://xamarin.com/schemas/2014/forms&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2009/xaml&amp;#34; xmlns:local=&amp;#34;clr-namespace:kentxxq_app&amp;#34; x:Class=&amp;#34;kentxxq_app.MainPage&amp;#34;&amp;gt; &amp;lt;StackLayout&amp;gt; &amp;lt;!</description></item><item><title>gitlab手摸手排坑</title><link>https://kentxxq.com/contents/gitlab%E6%89%8B%E6%91%B8%E6%89%8B%E6%8E%92%E5%9D%91/</link><pubDate>Mon, 06 May 2019 16:56:00 +0800</pubDate><guid>https://kentxxq.com/contents/gitlab%E6%89%8B%E6%91%B8%E6%89%8B%E6%8E%92%E5%9D%91/</guid><description>公司准备趁着项目重写的契机，准备从svn切换到git。于是也出现了很多的坑。
技术选型 之前写过一篇关于gitea的文章，但是这一次我选择了gitlab。
资源占用 先展示一下采用docker运行后的对比sudo docker stats
可以看到gitlab使用了3GB以上的内存！我的天。
我就一个代码仓库啊！就我一个用户正在用啊！cpu时不时飙到了30%是什么鬼啊！
进入到gitlab后台管理监控，直接吓尿。。
为了ci，选了gitlab ci有很多，jenkins,gitlab ci,drone,travis ci等等。
jenkins的界面我是真的不喜欢。操作也比较繁琐，没有一个单独文件来的直观。虽然貌似功能(插件)很丰富？！适合有过经验的人
travis ci是因为github才被了解到的。可惜不开源，就不考虑了。适合开源项目用
drone的缺点就是没有很好的集成到一起，文档也不够全面，再加上了解的过程中，网友们遇到了不少坑。适合想硬件资源比较紧张/对go非常感兴趣/喜欢尝试新鲜事物的(排坑是必须的)
gitlab ci开源。有广大的用户群。文档完善。与gitlab集成非常好。唯一缺点就是对硬件要求比较高
开始部署 安装docker 安装运行gitlab。根据官方文档，我修改了默认的端口。同时取消了22和443端口的映射。因为用不上啊。 # 要点: # 1. 确保存在/data文件夹 # 2. restart always代表每次重启docker服务，都会启动它 sudo docker run --detach \ --hostname yhserver \ --publish 1080:80 --name gitlab \ --restart always \ --volume /data/gitlab/config:/etc/gitlab \ --volume /data/gitlab/logs:/var/log/gitlab \ --volume /data/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest 安装运行gitlab runner并且注册，推荐使用推荐的方法，也就是yum安装gitlab runner。这里需要注意的是，如果你需要构建docker镜像，推荐使用shell作为executor。 在项目中添加.</description></item><item><title>记录一次实机安装Centos7</title><link>https://kentxxq.com/contents/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%9C%BA%E5%AE%89%E8%A3%85centos7/</link><pubDate>Mon, 15 Apr 2019 11:59:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%9C%BA%E5%AE%89%E8%A3%85centos7/</guid><description>之前安装centos，都是在阿里云，虚拟机，还有hp-gen6-380的服务器上面安装。
也就是说实体机的操作经验，只有一个比较老的hp服务器。而这次使用普通pc机来安装，遇到了不少的问题。重装了大概有50次+吧，特意来记录一下。
安装经验 交代一下安装linux的经验
阿里云，虚拟机(这两个都属于虚拟环境了) hp-gen6-380(比较老的服务器机型) 家用e3v3+gpu750ti+华硕gaming主板(安装的是的fedora29，所有的组件都很新，问题也不少) 而这次安装在普通pc上，却遇到了问题。让我觉得还是很有必要系统性的了解一下。
遇到的问题 grub2-timeout问题 启动了开机按钮以后，一直卡住在这个界面，需要手动操作才能完成点击。
解决方案:
把超时时间设置为0，直接跳过内核选择界面。进入默认选中的第一个内核
### 路径 [root@YHcentos7 default]# pwd /etc/default ### 查看配置文件 [root@YHcentos7 default]# cat grub GRUB_TIMEOUT=0 GRUB_DISTRIBUTOR=&amp;#34;$(sed &amp;#39;s, release .*$,,g&amp;#39; /etc/system-release)&amp;#34; GRUB_DEFAULT=saved GRUB_DISABLE_SUBMENU=true GRUB_TERMINAL_OUTPUT=&amp;#34;console&amp;#34; GRUB_CMDLINE_LINUX=&amp;#34;crashkernel=auto rhgb quiet&amp;#34; GRUB_DISABLE_RECOVERY=&amp;#34;true&amp;#34; ### bios系统生成boot配置 [root@YHcentos7 default]# grub2-mkconfig -o /boot/grub2/grub.cfg GRUB_DISABLE_RECOVERY=&amp;#34;true&amp;#34; ### uefi系统生成boot配置 [root@YHcentos7 default]# grub2-mkconfig -o /boot/efi/EFI/centos/grub.cfg ### 重启 [root@YHcentos7 default]# reboot 如果你想知道为什么不能启用timeout进入指定的内核，请看下面
在重装了差不多5次以后，我其中的一次安装后，居然没有问题！导致我后续重装了大概50次，找到了原因。
我的u盘启动盘，是用rufus制作的。用的centosdvd版本的镜像。
插入u盘后，引导设备如下
可以看到，除了128gb的硬盘，还有2个可选项！
选择第一个，也就是UEFI启动，在后续的系统分区中，你必须给/boot/efi指定分区。分区文件类型为efi。如果没有的话，会报错no valid bootloader target device found centos 7 for a uefi installation</description></item><item><title>在mac上HEIC转JPG或PNG</title><link>https://kentxxq.com/contents/%E5%9C%A8mac%E4%B8%8Aheic%E8%BD%ACjpg%E6%88%96png/</link><pubDate>Mon, 15 Apr 2019 08:59:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%9C%A8mac%E4%B8%8Aheic%E8%BD%ACjpg%E6%88%96png/</guid><description>用iPhone拍出来的照片，传到mac上显示结尾是HEIC的图片文件。在markdown中不支持，同样在hugo的web页面里也不支持。
所以找了一下方法，发现automator这个功能可以一劳永逸的实现。之前一直没有用过。所以记录一下。
关于automator 如果想要了解详细的文档和资料，看下面的链接就好了。
在iOS上有workflow(捷径)，那么automator就是macOS的workflow(自动操作)。
苹果automator的官方介绍
实际操作上手 演示一波HEIC转JPG或PNG
Command+Space(空格)，输入automator,进入后点击新建文稿。 选择快速操作 把左边的步骤拖动到右边，调整后的页面如下 左上角文件-&amp;gt;存储-&amp;gt;保存名字HEIC转JPEG即可 在访达中使用即可 快去看看你的桌面上出现了什么！ 总结 还有很多的小功能组合。感觉比iOS上好用多了，支持的功能数量不在一个量级。毕竟一个是手机，一个是电脑吧。</description></item><item><title>记录一次解决电脑异响的过程</title><link>https://kentxxq.com/contents/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E7%94%B5%E8%84%91%E5%BC%82%E5%93%8D%E7%9A%84%E8%BF%87%E7%A8%8B/</link><pubDate>Sun, 14 Apr 2019 13:12:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3%E7%94%B5%E8%84%91%E5%BC%82%E5%93%8D%E7%9A%84%E8%BF%87%E7%A8%8B/</guid><description>现在公司里其实就只有一台开发服务器。运行着win7，运行着svn、oracle12c等等的服务。
但是最近公司项目打算重写。从SpringMVC换成SpringBoot,前后端分离，用vue来写。代码服务器准备从svn换成git。而前后端的权限验证，打算用redis来进行保存。
而redis在windows上只有3.x的版本，太老了。后期也打算把项目的部署全部流程化，规范化。解决误操作的问题。所以还是打算windows转linux。
环境说明 配置其实很烂:
cpu:i3-4130 memory:16gb 1600 storage:128SSD+500GBHDD power:长城HOPELY HP-2800DY 我在办公的时候，用的是win10。每次开机都会有非常大的声音，机箱震动明显。
初步分析应该是在开机的时候会全功率运行风扇。我当时的想法是，之前没有这么大的声音啊。于是开机以后手动休眠，机箱没有了反应，然后用鼠标或者键盘唤醒电脑。这时候电脑不会全功率运转，至少风扇不会这样。于是开始办公。
但是我现在是要用来装linux啊。准备摆放到一个角落，只有一个网线和电源连接。难道我开机以后，也远程进入休眠。然后去唤醒？我没有这么操作过，能不能成功还不知道，在linux下这个办法能不能管用也不知道。于是想着要从根源解决。
我最早的一部个人电脑是联想的笔记本。用了4年左右，风扇也是出现的相同的情况。之前也有过一次自己拆机清灰的经验。自己给风扇加了一点猪油。。。解决了问题后，感觉性能都上升了2个档次！
开始动手 先看机箱图 我把电源弄了出来了。可以看到是小主板。东西不是特别多，但不整洁。对比一些背部走线的机箱，算比较乱的了。
因为拆开以后，我用手摸着各个可能震动的部位，发现是电源部分，所以把电源拿了出来。
电源图 从电源的型号，我成功搜到了对应的淘宝卖家。同时也有了详细的参数信息。
电源内部图 断电，卸掉了顶部的4个螺丝，但是盖子还有线材连接，所以只能这样拍了一张。
我也没学过什么电路和电板知识，但是我知道肯定是这个风扇最可疑了。
取下了右下角的风扇接口，重新开机。果然！
但是电源的风扇还是很有用的，我只能自己换了它。
风扇图 下面附上一个此类风扇的内部拆解视频。
我在加了一些润滑油以后，还是有很大的响声和震动。我在拆开的时候，很容易就弄坏了上层的白色胶片。
干脆就打算去重新买一个新的风扇好了。
风扇接口图 可以看到是2个口的。
于是在淘宝上找。。淘宝真是个好东西啊！感觉国外的人真的是生活在水深火热中啊～～
根据8cm和2pin口这个信息，成功买到了适合的风扇。
完工！ 把风扇装好，测试没问题。收工！
总结 我自己之前最多也就是加加内存(拔插一下)，加加硬盘(怼上接口，拧好螺丝)。心里比较忐忑。因为拆了硬件以后，一般都是不保修的。
电源顶部的一个螺丝，是用防伪纸盖住的。要拆开肯定就会被发现。如果厂家看到了，也会拒绝保修。但是我打了一圈的电话，也没能搞定。真的是无语了。虽然价格便宜，但是服务态度真的是一般般。爱踢皮球。
还好电脑这东西不容易坏。正常使用。一用就是很多年，而且可以升级。不用太担心拆坏。
你要想想那些电脑城的人，入门门槛极低，手艺层次不齐。细心一点，你能做的比他们更好！</description></item><item><title>拓展hugo的markdown_流程图mermaid</title><link>https://kentxxq.com/contents/%E6%8B%93%E5%B1%95hugo%E7%9A%84markdown_%E6%B5%81%E7%A8%8B%E5%9B%BEmermaid/</link><pubDate>Sat, 30 Mar 2019 21:59:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%8B%93%E5%B1%95hugo%E7%9A%84markdown_%E6%B5%81%E7%A8%8B%E5%9B%BEmermaid/</guid><description>有一段时间用有道云笔记来做笔记。里面有一个非常喜欢的功能就是流程图。
同时我在看自己的站点过程中，觉得不够美观。更多的使用图表类似的功能，会让表达更加直观。所以今天就来动手做一下。
hugo的渲染 使用markdown 主要采用markdown文件进行文章的编写，它的方案如下:
md文件的解析，是用的blackfriday 除了已有的自带拓展，提供shortcodes来进行功能的拓展 shortcodes的演示 使用{{&amp;lt; youtube 8HnLRrQ3RS4 &amp;gt;}}的简短编写，即可完成如下youtube视频的展示。
想要自动播放的话，使用{{&amp;lt; youtube id=&amp;quot;8HnLRrQ3RS4&amp;quot; autoplay=&amp;quot;true&amp;quot; &amp;gt;}}&amp;quot;即可。
为markdown拓展流程图 关于mermaid mermaid是一个js库，用来渲染流程图用的。2w多的star，看了一下文档，觉得博客是肯定够了的。
如果真的要求特别高，那不如用专业软件做出来，导出图片更好。
拓展步骤 在你使用的主题中，找到yoursite/themes/themes_name/layouts文件夹，如果没有shortcodes文件夹，就自己新建一个 把mermaid的script标签贴到yoursite/themes/themes_name/layouts/partials/footer.html的footer外部 &amp;lt;!--head部分添加--&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.bootcss.com/mermaid/8.0.0-rc.8/mermaid.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 在shortcodes目录下新建mermaid.html文件
&amp;lt;!--mermaid.html--&amp;gt; &amp;lt;div class=&amp;#34;mermaid&amp;#34; align=&amp;#34;{{ if .Get &amp;#34;align&amp;#34; }} {{ .Get &amp;#34;align&amp;#34; }} {{ else }} center {{ end }}&amp;#34;&amp;gt; {{ safeHTML .Inner }} &amp;lt;/div&amp;gt; ojbk，测试一下 {{&amp;lt; mermaid &amp;gt;}} sequenceDiagram participant Alice participant Bob Alice-&amp;gt;John: Hello John, how are you?</description></item><item><title>gitea_搭建超简单的git代码管理服务</title><link>https://kentxxq.com/contents/gitea_%E6%90%AD%E5%BB%BA%E8%B6%85%E7%AE%80%E5%8D%95%E7%9A%84git%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1/</link><pubDate>Tue, 19 Mar 2019 17:35:00 +0800</pubDate><guid>https://kentxxq.com/contents/gitea_%E6%90%AD%E5%BB%BA%E8%B6%85%E7%AE%80%E5%8D%95%E7%9A%84git%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1/</guid><description> 一直管理着公司的svn。但是我的个人代码和项目都是用的git，代码也全部托管在github。之前就听说过gogs了。今天心想，要是以后公司用git管理，我应该就会选择gitea。
如何选择git托管服务器 现在我接触过的，也就只有gitlab，gogs，gitea。其他的我都觉得打不过gitlab。
当然,不谈场景就来选择，这是最错误的做法。
大公司场景 推荐使用gitlab:
拥有超多的用户，没什么坑。保证持续稳定的运行。即使出现故障也容易找到解决方案。 功能齐全，ci/cd等等功能一应俱全。大公司一般都用到ci/cd等等工具保证流程化运转。 gitlab其实在速度，部署便捷性等等方面没有优势。但是性能不够，机器来凑。
小型公司场景 推荐gogs或gitea:
go语言编写，性能比ruby好。同样的，也对机器性能要求低。 部署，迁移过程非常方便。 一个代码服务器。10个开发人员，一天可能就200次提交？一个树莓派就搞定了的事情。
对比gogs和gitea gitea是gogs的一个分支。但是分支很早(大概2016年)，已经有了很大的区别。
为什么我使用gitea呢？虽然我听歌爱听原曲，系统爱用原生，但是我使用gitea。特性如下:
更多的特性以及功能(比如仓库内代码搜索)。 更加齐全的文档(比如docker的安装配置)。 更加积极的开发(20190319日-贡献者更多)。 如果上面3点都对你没什么帮助。那你就gogs啊。 docker安装 作为一个docker的忠实拥簇，写一下docker的使用
# 拉去镜像 docker pull gitea/gitea:latest # 创建数据存放目录 sudo mkdir -p /var/lib/gitea # 运行docker，完成部署 sudo docker run -d --rm --name=gitea -p 10022:22 -p 10080:3000 -v /var/lib/gitea:/data gitea/gitea:latest # 解释 # 10022端口可以进行远程登陆 # 10080端口可以进行web访问，并且提供git服务 # /var/lib/gitea为本地的数据目录 对应到容器中的/data 在写这篇文章的时候，我非常得纠结。我其实是有选择困难的。在linux中，我对比debian和centos等等系列，最后我说服了自己选择centos。而这一次，我选择gitea。</description></item><item><title>PowerShell常用命令</title><link>https://kentxxq.com/contents/powershell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Tue, 12 Mar 2019 14:57:00 +0800</pubDate><guid>https://kentxxq.com/contents/powershell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>因为公司电脑都是win10系统，然后ss的win版本客户端，没有直接生成命令行的按钮，那就自己来呗。结果。。。
关于PowerShell 由于我平时很少使用win10下的命令行写脚本，但是PowerShell现在完全开源跨平台了。
想想你写一个脚本，无论什么环境，都能跑。指不定以后能一统shell呢？！
而且它还有一个简短的名字pwsh,几乎就是再和zsh，fish，bash靠拢啊！超级容易让初学者入坑。
使用习惯上的区别 powershell许多的操作不需要等号，比如设置变量值！ 如果开启了ss，就会系统级别的代理。你新开的会话窗口(powershell窗口)就已经被代理了。 常用命令(支持tab补齐) # 查看配置文件，可以永久配置方法，别名 $profile # 查询所有命令 Get-Command # 查询名字包含Process的命令 Get-Command -Name *Process # 常用系统方法 # 获取服务 Get-Service # 查看Get-Service服务的具体参数 Get-Service | Get-Member # 查看所有变量 ls env: # 查看指定变量 $env:windir # 创建变量 $env:a=&amp;#34;a&amp;#34; # 删除变量 del $env:a # 查看所有别名 Get-Alias # 临时设置别名 Set-Alias list get-childitem # 临时设置带参别名 # 先变成方法 function getlist {Get-ChildItem -Name} # 再来设置别名 Set-Alias ls getlist # 解除powershell下载限制 Set-ExecutionPolicy RemoteSigned -Scope CurrentUser 资源 官方参考文档</description></item><item><title>linux各个发行版本对比</title><link>https://kentxxq.com/contents/linux%E5%90%84%E4%B8%AA%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC%E5%AF%B9%E6%AF%94/</link><pubDate>Fri, 08 Mar 2019 10:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/linux%E5%90%84%E4%B8%AA%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC%E5%AF%B9%E6%AF%94/</guid><description>纠结过很久这个问题，结论最终是选择Centos。
写一篇日志，如果以后改变了选择，那肯定是因为随着系统的迭代，优缺点出现了不同。
各大主流发行版 Debian/Ubuntu系列 非常棒的发行版。用户量很大，更新也很及时。优点如下：
包管理工具采用apt，包数量很多，非常方便。 分unstable，testing，stable版本。unstable版本不稳定，但是紧跟内核。testing漏洞补丁一般是最慢，但是毕竟稳定不少。stable新特性最慢，但是坚如磐石。 对开发人员友好，很多的工具都在Debian进行ci测试。 Ubuntu是Debian的下游，说是很友好。但是漏洞修补慢，unstable的包很不稳定。
实在不知道为什么不用Debian。就为了一个官方版本的网易云音乐吗？
Centos/RHEL/Fedora系列 我见过用户量最大，文档最齐全(这里也包括博客等文档)的发行版。优点如下:
RHEL是最大的商业linux公司支持的。内核贡献度第一。技术实力强，稳。 文档最齐全，解决问题参考方案特别多。 企业用户量大，如果公司有钱，出问题一个电话给你商业支持。 兼容性好。如果有商业支持，会有各种神奇的补丁解决问题。 没钱就用Centos稳。有钱人就用RHEL，出问题有人接锅。
个人开发，追求内核更新速度，想体验最新特性用Fedora。
arch系列 爱折腾技术的极端分子。优点如下:
永远滚动更新。 追求精益求精，什么都自己来，包括自己编译。不要任何一点冗余。 官方文档是典范。甚至可以当linux的参考教程来用。 linux各版本的取舍 抛开需求，谈取舍是完全没有意义的。所以我的选择过程，可以给读者作参考。
人生苦短，我用python。所以我就不会用arch系列&amp;hellip;.等哪天财务自由再说吧 用linux最重要的就是，解决问题。不然为什么不用win10呢？所以我做了不同系统的尝试 我遇到的问题 尝试Debian的原因 vps里想要bbr特性，内核要上到4.9，总觉得Centos自己升级内核，没Debian的默认好。 使用testing或者unstale，类似滚动更新，一劳永逸啊！ apt的包多啊，比如ss-libev直接一下就能搜到。Centos还要去加copr源，跟进也不够及时 以后linux来办公，那服务器和工作站就相同环境了呀，Centos可能不好看 死心的原因 可能也是因为我太懒了，折腾不出来
按照官方教程，Cockpit在Centos上完全正常。Debian上登陆以后空白，出现一个send_async(好像是这个)的错误。找了一下资料，无果&amp;hellip; Centos安装图形化界面+Tightvnc，官方一步一步走，ok。debiban需要配置xstartup。这个xtartup脚本我折腾了好久，结果只能出来一个gnome经典界面，没有特效。。 另外一个xtartup配置出来了xfce的界面。。 效果不理想 我在用Centos的几年里，没有遇到过依赖问题。可能是我只用到了皮毛。但是Debian却在2天内让我遇到了。可能是包更新的速度，有的快，有的慢导致的，很头疼。 驱动问题。Centos因为维护时间长，变化不大。只要安装好了显卡驱动，一次就能跑好多年。而如果用了Debian，我看了一些文档，说nvidia的驱动都要改动内核还是什么的。很有可能哪次更新内核，就会挂。 这一点只是我的担心，没有实际操作过 如果我使用桌面版本，Fedora似乎更新，桌面使用更加友好。pipenv这样的工具，在官方github上对Fedora也有特别照顾。同时redhat的许多工程师，都是在致力于Fedora的bug修复，稳定性我也觉得不会比Debian的差到哪去。 个人原因 我一直以来都是接触的Centos,所以更加熟悉它。
服务器大量都是Centos系列，如果我客户端使用Fedora，对以后Centos服务器升级，也是有帮助的。这和我的工作内容有关。
读者可能遇到的问题 qq 推荐用chrome浏览器运行安卓版本qq就好了。或者参考docker-qq
听歌 推荐listen1，跨音乐平台收藏听歌！
office wps有linux版本了。</description></item><item><title>win10系统激活(kms)</title><link>https://kentxxq.com/contents/win10%E7%B3%BB%E7%BB%9F%E6%BF%80%E6%B4%BB/</link><pubDate>Thu, 07 Mar 2019 21:27:00 +0800</pubDate><guid>https://kentxxq.com/contents/win10%E7%B3%BB%E7%BB%9F%E6%BF%80%E6%B4%BB/</guid><description>话先说在前面，只是用来学习技术的，推荐使用正版。
win10的激活方式 MSDN密钥。属于内部的使用，封不封看微软态度。 Retail零售版密钥。就是你找微软买的，缺点就是要钱呗。 OEM密钥。电脑厂家出厂预装的系统，然后绑定了你的硬件信息，无法跨机器使用。 VOL密钥。一般是企业或者学校购买了批量授权。听说分mak和kms两种，前者永久，后者180需激活一次。 操作步骤 如果是新安装的系统，没有cd-key输入过，可以直接跳过前面2步
#执行 slmgr.vbs /upk #弹出(已成功卸载了产品密钥) #执行 slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX #弹出(成功的安装了产品密钥) #执行 slmgr /skms kms.luody.info #弹出(密钥管理服务计算机名成功的设置(kms.luody.info) #执行 slmgr /ato #弹出(成功的激活了产品) 可能遇到的问题 弹出内部版本xx过期 我用的是win10预览版，一直没有激活。激活了以后，一直弹出内部版本过期。
进入系统更新，升级到最新的版本，之后重启解决</description></item><item><title>js挖矿</title><link>https://kentxxq.com/contents/js%E6%8C%96%E7%9F%BF/</link><pubDate>Wed, 06 Mar 2019 09:58:00 +0800</pubDate><guid>https://kentxxq.com/contents/js%E6%8C%96%E7%9F%BF/</guid><description>前段时间有新闻说js挖矿，于是自己试了一下。写一写，留个印象。
什么是js挖矿 虚拟货币的产生，是通过一系列的计算得出的。而计算的过程需要强大的算力。这个计算过程就是挖矿。
js挖矿就是把挖矿过程从专用计算工具搬到了浏览器里。让页面的访问者进行计算。
发现js挖矿 如果有一天，你在浏览网页的时候，不经意发现旁边的360悬浮球提示cpu占用率持续在90%以上，那么小心了。你的电脑很有可能在挖矿！
如下方法检查
任务管理器查看 页面代码查看 如果没有故意隐藏的话，可以看到。否则还是看cpu更直接
有什么危害？ 可以看到，对于设备cpu的使用率，是可以进行调整的。同时可以对不同设备，用js进行判断是否启用挖矿代码。
所以一般而言，网站不会把cpu使用率弄到100%，否则用户会明显感受到电脑卡顿。如果是黑客行为，那可能就不会在乎这么多了。
但不用过于担心，因为它只会占用你的cpu运算能力，而不会读取你的个人数据。只要关闭网页，即可恢复正常。
会导致耗电量的提高，特别是手机/平板等移动设备。在页面正常运行时，续航将减少 会导致发热的问题。手机变成暖手宝，电脑设备风扇开始狂转散热 cpu负载过高，设备将会卡顿，影响到你的操作体验 电脑设备如果一直打开网页不关闭。长期如此，可能对设备寿命有影响(手机设备有更好的耗电管理，所以影响较小) 为什么部分站点还是会使用 一个网站的维护，是需要成本的。
一些网站有赞助商（需要愿者上钩，或者利益相关）。
一些网站有数不清的广告（广告可能无关联，且影响页面美观）。
一些网站是出于个人爱好，指不定哪天就关了（相当于阅后即焚?）。
而coinhive却能通过用户的一部分计算能力，直接提供盈利。经过用户同意后，网站有了一定的收入保障。而对用户而言，这是最最简单的免费赞助！
最新消息，coinhive停止服务 就在今天早上起来，我看了这则通知。
一句话概括：由于门罗币(monero)大跌了超过50%，几乎在崩溃的边缘。网费都要付不起了&amp;hellip;掰掰，老子不玩了。
影响 Coinhive的关闭，同类型的替代品还能坚持住吗？ 其实用Coinhive只是图个方便。网站完全可以自己搭建一个专用服务，还没有手续费。同时也非常简单:
coinhive-stratum-mining-proxy一个python实现 coin-hive-stratumtypescript参考后也实现了一个 对门罗币会有什么影响呢？ 几乎没有影响。js挖矿的算力对于那些大矿池来说，九牛一毛。同时大矿池的算力一直在增长。</description></item><item><title>poetry_更好的python包管理</title><link>https://kentxxq.com/contents/poetry_%E6%9B%B4%E5%A5%BD%E7%9A%84python%E5%8C%85%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 05 Mar 2019 23:41:00 +0800</pubDate><guid>https://kentxxq.com/contents/poetry_%E6%9B%B4%E5%A5%BD%E7%9A%84python%E5%8C%85%E7%AE%A1%E7%90%86/</guid><description>我在学习python过程中，一直想要寻求到最佳实践。
因为它意味着当你拿到一份你没有见过的代码时，这种事实标准会帮助到你。
使用包管理的原因 pip和python包管理问题 单个项目中要把需要的包独立出来，方便部署 不同的项目要求不同的包版本，不能混乱 py2和py3或者具体的小版本，区分开来 pipenv vs venv(py3) vs poetry pipenv pipenv在github上有15000+的star，commit次数达6000+，这代表着很多人看好它,足够大用户群,完善程度较高。
但是它也存在有问题：
lock太慢。在国内特别特别慢，你需要修改Pipfile的source才能加速(还是会慢)。 只是单纯用来替代requirements.txt文件，没有综合解决setup.py等工具的打包问题 venv 它是python官方推荐的工具。所以(PyCharm，vscode等)对它的支持也会是最好的。
虽然之前官方包pyvenv被弃用了。但是它支持最好，它只有一些基本的功能。
poetry 使用的人不多，知名度也不高。
但是没有pipenv的一些问题。这是我比较推荐的一个。
但也有一个问题。那就是PyCharm等等工具是不支持的。
最终选择 使用poetry,要素:
简单，快速 综合了setup.py，所以极有可能以后成为事实标准，对任何开发者都更加方便。 PyCharm不是你的常用首选工具 为什么我加上第三点呢？因为PyCharm(vscode对它的支持个人觉得不实用)支持pipenv。在ide内安装包，很方便啊。而且我没有遇到速度慢的问题,不清楚是不是ide自己做了处理。
PyCharm默认的情况下，是使用virtualvenv，它和venv几乎没有什么区别。方便就好啊!
poetry在PyCharm呢？去命令行里装。虽然更直接。但是你可能记不清具体的包名？想看看最新的版本号？PyCharm都给你解决了。
杂谈 requests的确是个很好用的库。
那是因为python标准库在一开始没有设计好，而后有很多的开发者加入了requests的贡献行列，所以很厉害。
但是并不是他开发的所有东西都是最适合你的。你需要自己去体验它。
他的库，总有用for humans来标榜自己。其他人写的难道就不是给人用的啦？
虽然很多人都这样创造了好用的工具，但是pipenv显然还不是那么好。</description></item><item><title>用vue搭建web</title><link>https://kentxxq.com/contents/%E7%94%A8vue%E6%90%AD%E5%BB%BAweb/</link><pubDate>Mon, 21 Jan 2019 20:23:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E7%94%A8vue%E6%90%AD%E5%BB%BAweb/</guid><description>刚刚开始学习vue，把基础的用法学过了一遍。现在开始使用vue-cli搭建项目，以及使用了解相关router，vuex和webpack等等。
安装开发环境 #安装node，vue-cli brew install node #修改为淘宝源 npm config set registry http://registry.npm.taobao.org/ #安装vue-cli npm install -g @vue/cli vue-cli来初始化项目 vue create wechat_web #选择一些基础信息，就自动生成了项目 #在构建完成以后，查看整体文件大小 --report npm run build --report #直接构建出来项目 npm run build #开发的时候运行项目，实时自动reload npm run serve 安装ui库 pc端使用element-ui mobile端使用vant
#进入项目的ui管理界面 vue ui # 1.点击依赖 # 2.搜索安装vant # 3.安装插件，方便自动生成按需引用，减少js体积 npm i babel-plugin-import -D babel.config.js中配置:
module.exports = { plugins: [ [&amp;#39;import&amp;#39;, { libraryName: &amp;#39;vant&amp;#39;, libraryDirectory: &amp;#39;es&amp;#39;, style: true }, &amp;#39;vant&amp;#39;] ] }; 引用+使用</description></item><item><title>复习vue的重点要记</title><link>https://kentxxq.com/contents/%E5%A4%8D%E4%B9%A0vue%E7%9A%84%E9%87%8D%E7%82%B9%E8%A6%81%E8%AE%B0/</link><pubDate>Thu, 17 Jan 2019 21:15:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%A4%8D%E4%B9%A0vue%E7%9A%84%E9%87%8D%E7%82%B9%E8%A6%81%E8%AE%B0/</guid><description>vue备忘录
常用 v-model v-text v-for v-show :key @click 获取dom元素:this.$ref
获取当前元素:this.$el
vm渲染完后执行:this.$nextTick(()=&amp;gt;{})
vm上的数据:this.$vm
在子组件上触发父组件给自己创建的事件: 父组件先定义好对应的方法 methods:{things(val){this.money = val;}} 这里先把money穿给子组件，然后绑定事件和对应的方法 &amp;lt;child :m=&amp;quot;money&amp;quot; @child-msg=&amp;quot;things&amp;quot;&amp;gt;&amp;lt;/child&amp;gt; 子组件触发父组件的方法，并且传递参数。 this.$emit('child-msg',800); 或者： &amp;lt;child :m.sync=&amp;quot;money&amp;quot;&amp;gt;&amp;lt;/child&amp;gt;
this.$emit('update:m',800);
子组件(带参数)=&amp;gt;触发父组件的函数标签=&amp;gt;执行父组件绑定好的method</description></item><item><title>python导出qq空间到博客</title><link>https://kentxxq.com/contents/%E5%AF%BC%E5%87%BAqq%E7%A9%BA%E9%97%B4%E5%88%B0%E5%8D%9A%E5%AE%A2/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%AF%BC%E5%87%BAqq%E7%A9%BA%E9%97%B4%E5%88%B0%E5%8D%9A%E5%AE%A2/</guid><description>既然有了自己的博客，把以前的黑历史啥的都搬过来吧。毕竟这个网站我是打算用很久很久的。我只保存了所有的照片，所有的留言板都是对我单独的对话，所有的说说都是我的一个日记。
先用一个老哥的开源代码把数据跑下来 把照片都传到google相册 把留言板弄成md，然后把e101类似的表情手动对比替换了。。。主要是没有文档，还不如手动来得快 # coding:utf-8 import os import json import arrow import re head = &amp;#34;&amp;#34;&amp;#34; --- title: qq空间黑历史 date: 2019-01-14 00:00:00 +0800 categories: [&amp;#34;黑历史&amp;#34;] tags: [&amp;#34;留言板&amp;#34;] --- &amp;#34;&amp;#34;&amp;#34; path = &amp;#39;/Users/kentxxq/kent_code/QzoneExporter/805429509/msg_board&amp;#39; files = os.listdir(path) files = sorted(files) p_html = re.compile(&amp;#39;\[.*?\]&amp;#39;) with open(&amp;#39;/Users/kentxxq/kent_code/blog/site/content/posts/lines/qq空间黑历史.md&amp;#39;, &amp;#39;w&amp;#39;) as f: f.write(head) f.write(&amp;#39;\n&amp;#39;) f.write(&amp;#39;\n&amp;#39;) for file in files: with open(path + &amp;#39;/&amp;#39; + file, &amp;#39;r&amp;#39;) as m: datas = json.load(m)[&amp;#39;data&amp;#39;][&amp;#39;commentList&amp;#39;] for data in datas: pubtime = data[&amp;#39;pubtime&amp;#39;] f.</description></item><item><title>oracle批量更新数据</title><link>https://kentxxq.com/contents/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/</link><pubDate>Sat, 05 Jan 2019 20:49:21 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/</guid><description> 在工作中经常需要对已有的表结构进行改变，或者改动。所以总结了一些常用的技巧
新增字段 给定一个默认值。这样会非常快的加好新字段。
修改超级大表 下面是批量更新，delete操作也可以同理操作。这样可以让sql不会因为长时间执行，而出现各种网络问题干扰。且更好控制。
declare cursor update_cursor is select a.*, a.rowid row_id from t_com_outpatient_info a order by a.rowid; begin for v_cusor in update_cursor loop if v_cusor.fenqu is null then update t_com_outpatient_info set fenqu=substr(center_no,0,6) where rowid = v_cusor.row_id; end if; if mod(update_cursor%rowcount,10000)=0 then commit; end if; end loop; commit; end;</description></item><item><title>git的常用命令</title><link>https://kentxxq.com/contents/git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Fri, 04 Jan 2019 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>去除所有的历史 #初始化连接到远程库 git init git remote add origin git@github.com:user/repo #添加所要添加的文件 git add . git commit -am ‘first commit’ #强制推送到远程库 git push -f origin master #强制拉取，覆盖本地 git reset -—hard origin/master</description></item><item><title>开发以及运维的流程-docker</title><link>https://kentxxq.com/contents/%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8A%E8%BF%90%E7%BB%B4%E7%9A%84%E6%B5%81%E7%A8%8B-docker/</link><pubDate>Thu, 03 Jan 2019 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8A%E8%BF%90%E7%BB%B4%E7%9A%84%E6%B5%81%E7%A8%8B-docker/</guid><description>开发以及运维的流程-docker
个人开发以及部署 github提交代码 触发webhook，通过脚本让服务器上的容器停止，清除，重新打包，部署 从拿到centos服务器开始 安装系统所需的repo #官方的拓展库 sudo yum install epel-release -y #Rpmfution只会分发red hat的规范不允许使用的库，它依赖于epel sudo yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm sudo yum install https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-7.noarch.rpm #Elrepo 专注于硬件的驱动程序，比rpmfusion要多一些些，例如kmod同时还有内核，非常有用 rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm # 如果你需要超级高版本的git或者php之类的，可以看看这个库 # 先默认用base里的，如果版本不能满足，那么就search一下，指不定能用上里面测试过的，兼容性好的包 sudo yum install centos-release-scl unzip -y # 更新到最新的版本 sudo yum update -y 配置我所需要用到的服务 #Nginx 我的http代理 sudo vi /etc/yum.repos.d/nginx.repo [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/ gpgcheck=0 enabled=1 #shadowsocks 翻墙工具c版本 sudo vi /etc/yum.repos.d/shadowsocks.repo [librehat-shadowsocks] name=Copr repo for shadowsocks owned by librehat baseurl=https://copr-be.</description></item><item><title>转到hugo后的架构</title><link>https://kentxxq.com/contents/%E8%BD%AC%E5%88%B0hugo/</link><pubDate>Sun, 23 Dec 2018 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%BD%AC%E5%88%B0hugo/</guid><description> 趁着从jekyll转hugo，也重新来规划一下自己的个人网站以及代码部署架构。
转到hugo 之前有写过一篇笔记对比。但是使用的是jekyll。为什么切换成hugo呢？说一下jekyll主要缺点
需要ruby的环境，本地编译生成静态网站。麻烦 因为以后都会用下去，所以以后多了，难免会比较慢，快一点 可以更方便的切换主题。改动量更小 archetypes很好用，很方便 后面的改动，具体参考开发以及运维的流程吧
访问架构 第一层用nginx来代理，同时它也用来分发请求 第二层直接可以跳转到github/blog/个人项目 代码结构 全部存放在github私人仓库
服务器使用centos，完成所需服务的配置。例如ss，bbr，docker之类的 部署nginx好服务 放好触发代码部署的钩子 第一次手动触发钩子。所有的服务就启动好了 20190110 更新 github被微软收购以后，居然免费了？！不过分担心盈利问题了以后，就是不一样。。所以我又花了2个多小时切换回github..
github更快 不用在gitlab和github中跳转了。因为github的资源是最多的</description></item><item><title>调试安卓或者iphone上的网页</title><link>https://kentxxq.com/contents/%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93%E6%88%96%E8%80%85iphone%E4%B8%8A%E7%9A%84%E7%BD%91%E9%A1%B5/</link><pubDate>Fri, 21 Dec 2018 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%B0%83%E8%AF%95%E5%AE%89%E5%8D%93%E6%88%96%E8%80%85iphone%E4%B8%8A%E7%9A%84%E7%BD%91%E9%A1%B5/</guid><description> 开发的时候，电脑上chrome没问题，但是手机上访问有问题，那么就需要在手机上调试。
iphone上调试safari 开启safari上的web检查器 连接mac，然后打开开发者选项 mac上选中自己iphone即可开始调试 android上调试chrome brew cask install android-file-transfer可以帮助你检测到手机 打开手机上的开发者选项，开启usb调试 chrome://inspect/#devices就可以查看到设备，然后点开 手机上访问页面，就可以通过devtools调试了</description></item><item><title>oracle普通表转分区表</title><link>https://kentxxq.com/contents/%E6%99%AE%E9%80%9A%E8%A1%A8%E8%BD%AC%E5%88%86%E5%8C%BA%E8%A1%A8/</link><pubDate>Thu, 20 Dec 2018 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%99%AE%E9%80%9A%E8%A1%A8%E8%BD%AC%E5%88%86%E5%8C%BA%E8%A1%A8/</guid><description>分析一波
oracle有很多的版本，现在的话，常用的有11g，12cR1/R2。都有不同的方法
对于数据库，我是不推荐使用外键，存储过程，或者触发器的。除非对数据需要超高度的一致性要求，同时不规范的数据，是属于不允许的
数据库的拓展需要添加新的集群存储，新的机器部署oracle服务，很难像应用服务器一样动态部署，相反拓展服务器更加简单。承担了这一部分的数据库压力 外键是也是有性能消耗的，同时内部加锁，更容易出现死锁问题 尽量少的数据库约束，越方便数据之间的解耦合。否则你会发现所有的表都互相依赖。牵一发而动全身 应用应该知道自己的操作是在干嘛，而不是考虑不周，让写在数据库里的潜规则告诉你必须如何 方便读写分离，更好的解决了数据库写方面的压力，而读数据的锁几乎没有压力 操作前提 主键 拥有自己的逻辑id，而不是业务id主键。否则不方便以后的水平拓展 使用oracle提供的包来检测是否可行 12cR1和11g --检查可用性 EXEC DBMS_REDEFINITION.can_redef_table(UNAME =&amp;gt; &amp;#39;QX_HENGSHAN&amp;#39;,TNAME =&amp;gt; &amp;#39;A20181220_2&amp;#39;); --开始重定义 DBMS_REDEFINITION.START_REDEF_TABLE( uname =&amp;gt; &amp;#39;STEVE&amp;#39;, orig_table =&amp;gt; &amp;#39;salestable&amp;#39;, int_table =&amp;gt; &amp;#39;int_salestable1, int_salestable2, int_salestable3&amp;#39;, col_mapping =&amp;gt; NULL, options_flag =&amp;gt; DBMS_REDEFINITION.CONS_USE_ROWID, part_name =&amp;gt; &amp;#39;sal03q1,sal03q2,sal03q3&amp;#39;, continue_after_errors =&amp;gt; TRUE); --开始拷贝数据 DBMS_REDEFINITION.COPY_TABLE_DEPENDENTS( uname =&amp;gt; &amp;#39;AKAHALI&amp;#39;, orig_table =&amp;gt; &amp;#39;ST1&amp;#39;, int_table =&amp;gt; &amp;#39;T1&amp;#39;, num_errors =&amp;gt; lvn_errs ); --完成重定义 dbms_redefinition.finish_redef_table( uname =&amp;gt; &amp;#39;AKAHALI&amp;#39;, orig_table =&amp;gt; &amp;#39;ST1&amp;#39;, int_table =&amp;gt; &amp;#39;T1&amp;#39; ); 12cR2 ALTER TABLE table_name MODIFY table_partitioning_clauses [ filter_condition ] [ ONLINE ] [ UPDATE INDEXES [ ( index { local_partitioned_index | global_partitioned_index | GLOBAL } [, index { local_partitioned_index | global_partitioned_index | GLOBAL } ].</description></item><item><title>python二进制和位运算</title><link>https://kentxxq.com/contents/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Wed, 29 Aug 2018 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>简介 一直以来，我对二进制啊，8进制啊，16进制啊不太了解，没有系统学习过。 今天来补习一下c的知识，同时做一下笔记，以后忘了就看这里好了。
进制 2进制：逢2进1
8进制：逢8进1
16进制：逢16进1
在C程序中的表示(python中也一样)：
0b101 /*2进制 0b开头*/ 0115 /*8进制 0开头*/ 0xFFF /*16进制 0x开头*/ 转换十进制方法:个位直接加，十位是进制数的1次方，百位是进制数的2次方，高位以此类推即可
0b101 = 1 + 0*2 + 1*2*2
0115 = 5 + 1*8 + 1*8*8
0xFAF = 15 + 10*15 + 15*15*15
位运算符 我其实用的不是特别多，见的也不多。但是在很多的官方案例中出现过，比如python人脸识别中的跳出循环
if cv2.waitKey(1) &amp;amp; 0xFF == ord(&amp;#39;q&amp;#39;): break 所以首先总结一下：
&amp;lt;&amp;lt; #左移 &amp;gt;&amp;gt; #右移 | #位或 &amp;amp; #位与 ^ #位异或 ~ #非 &amp;lt;&amp;lt; #左移 将所有的0和1的位置进行左移，移位之后将空位补0 左移操作相当于乘以2**n，以5 &amp;lt;&amp;lt; 3 为例，相当于5(2*3),结果为40 0b101 变成了 0b101000 # 一个int是4个字节，一个字节是8位(bit)，它存储的大小就是32位 # 如果加了0，超出了32位边界，那么就是溢出了 &amp;gt;&amp;gt; #右移 将所有的0和1的位置进行右移(直接舍弃)，空位正数补0，负数补1 右移操作相当于除以2**n，8 &amp;gt;&amp;gt; 3 相当于8/(2**3)=1 | #位或 0b110 | 0b101 #输出7,即0b111 只要有一位有1就为1，可以用在综合条件 &amp;amp; #位与 0b110 &amp;amp; 0b011 #输出2，即0b010 相同的位才为1，可以用在linux权限 ^ #位异或 0b1010 ^ 0b1111 #输出5，即0b0101 异或常用于将所有的位反转，相同的位置是0，否则其他的位置变1， ~ #非 ~0b101 #输出2，即0b010 这个是单独运算的，直接就把所有的反转了 理解cv2.</description></item><item><title>关于文档笔记</title><link>https://kentxxq.com/contents/%E5%85%B3%E4%BA%8E%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/</link><pubDate>Mon, 27 Aug 2018 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%85%B3%E4%BA%8E%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/</guid><description> 其实关于做笔记，其实我也不是经常写，但是很喜欢。而我又有选择困难症，现在来一篇文档，结束掉自己的很多想法。。。
markdown vs 其他标记类语言或者doc markdown更简单，同时对我来说，是够用的。 几乎所有的编辑器，工具默认都是完美支持的。 非常多的工具支持它变成web站点，切换主题即可作为api等文档站点使用 这样我们就排除掉了Sphinx
jekyll vs mkdocs jekyll的主题选择更多，可选择的风格类型更多(mkdocs几乎没得选，看到这一点其实就可以跳过这一节了) 我的jekyll目录的划分在文件内，不用单独编辑配置文件。有进行一些日期分组，不用自己魔改。更适合做博客类型的文档。参考第一点 其他的懒得比了，效果能好到天上去？mac自带ruby和python，其他的还得装环境呢 其他 可以使用chrome另存为，来导出html
可以使用chrome打印，来导出pdf
本地运行jekyll # mac自带ruby,直接安装所需的包 sudo gem install jekyll sudo gem install minima sudo gem install bundler # 进入到文件夹内，直接运行即可 jekyll serve # 访问http://127.0.0.1:4000查看效果即可 Configuration file: /Users/user/blog/_config.yml Source: /Users/user/blog Destination: /Users/user/blog/_site Incremental build: disabled. Enable with --incremental Generating... done in 0.567 seconds. Auto-regeneration: enabled for &amp;#39;/Users/user/blog&amp;#39; Server address: http://127.0.0.1:4000/</description></item><item><title>centos部署web服务（可拓展）</title><link>https://kentxxq.com/contents/%E9%83%A8%E7%BD%B2web%E6%9C%8D%E5%8A%A1%E5%8F%AF%E6%8B%93%E5%B1%95/</link><pubDate>Tue, 17 Apr 2018 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E9%83%A8%E7%BD%B2web%E6%9C%8D%E5%8A%A1%E5%8F%AF%E6%8B%93%E5%B1%95/</guid><description>学习了一下如何搭建大型的web应用，可拓展到承接大量的请求
架构说明 第一层购买域名以及云dns解析 第二层在这一个服务器搭建nginx的服务器。反向代理这一个服务器集群提供的服务 第三层在每一台服务器使用gunicorn，开启多个进程来处理flask请求 第四层flask连接到云内部的数据库，同时也就不用担心数据库的同步问题了。（费用如果很高，那说明你需求量很高，很赚钱了啊） 现在是云时代。我喜欢所有的东西都放在云上。除非是大企业在机房自建，不然够用了 域名部分我就不说了。。一般在对应的云上面找到，然后点点点就ok
安装环境 # 设置nginx包 # root @ kentxxq in /etc/yum.repos.d [14:17:01] $ cat nginx.repo [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/ gpgcheck=0 enabled=1 # 安装nginx yum install nginx # 安装python curl -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash # 添加到.bash_profile的尾部 export PATH=&amp;#34;/root/.pyenv/bin:$PATH&amp;#34; eval &amp;#34;$(pyenv init -)&amp;#34; eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34; # 安装指定版本的python，安装所需的包 pyenv install 3.6.3 pyenv global 3.6.3 # 安装所需要的包 pip install gevent pip install flask pip install gunicorn 配置文件 ######################## # nginx配置文件 ######################## $ root @ kentxxq in /etc/nginx [14:28:10] $ cat nginx.</description></item><item><title>vue_node学习系列</title><link>https://kentxxq.com/contents/vue_node%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/</link><pubDate>Thu, 11 Jan 2018 11:17:00 +0800</pubDate><guid>https://kentxxq.com/contents/vue_node%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97/</guid><description> 以后可能会用到的知识
npm使用中用到的命令 # 我要使用element-ui # npm i和npm install 是一样的意思 # -S, --save 安装包信息将加入到dependencies（生产阶段的依赖） # -D, --save-dev 安装包信息将加入到devDependencies（开发阶段的依赖），所以开发阶段一般使用它 npm i element-ui -S # 这个babel插件可以按需导入饿了么的组件 # npm install babel-plugin-component -D</description></item><item><title>python的文件项目打包</title><link>https://kentxxq.com/contents/python%E7%9A%84%E6%96%87%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</link><pubDate>Thu, 19 Oct 2017 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/python%E7%9A%84%E6%96%87%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</guid><description>在自己的机器还有服务器上面，都应该搭建好pyenv 网络上的教程太多了，但是说的又很乱。所以自己稍微整理一下。 这次的目的是写一个及其简单的过程，所以如果有具体问题，请看官方文档。
先看目录结构 $ tree . ├── MANIFEST.in ├── README.md ├── myapp │ ├── 1.txt │ ├── __init__.py │ ├── __pycache__ │ │ ├── __init__.cpython-36.pyc │ │ └── test.cpython-36.pyc │ ├── test.py │ └── txt │ └── 1.txt ├── myapp2 │ └── test222.py └── setup.py 4 directories, 10 files MANIFEST.in用来记录除了py文件外，需要打包的文件 # 包含文件 include README.md # 递归-包含 recursive-include myapp/txt * README.md一个用来简单介绍的文档
myapp和myapp2都是存放代码
setup.</description></item><item><title>python的pip出现故障</title><link>https://kentxxq.com/contents/python%E7%9A%84pip%E5%87%BA%E7%8E%B0%E6%95%85%E9%9A%9C/</link><pubDate>Tue, 05 Sep 2017 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/python%E7%9A%84pip%E5%87%BA%E7%8E%B0%E6%95%85%E9%9A%9C/</guid><description> 今天在使用的过程中macOS，想要用命令更新一下python的所有包。 使用命令如下：
# 把所有的过期包找出来，使用-U来更新 pip3 list --outdated | grep &amp;#39;^[a-z]* (&amp;#39; | cut -d &amp;#34; &amp;#34; -f 1 | xargs pip3 install -U 出现报错 ImportError: cannot import name &amp;#39;IncompleteRead&amp;#39; 解决问题 # 1...在官网下载新的python安装包，然后进行安装。 并不会影响到你之前的python3环境！例如xlrd等工具包，并不会被覆盖丢失！ wget https://www.python.org/ftp/python/3.6.2/python-3.6.2-macosx10.6.pkg --no-check-certificate # 2...wget下载这一个python文件--这个地址可以自动识别python版本 https://bootstrap.pypa.io/get-pip.py wget https://bootstrap.pypa.io/3.2/get-pip.py --no-check-certificate # 3...执行此文件 sudo python3 get-pip.py 心得 操作起来特别容易的事情，而我不经常写笔记。为什么要记录下来呢？
我是一个python新手，希望能帮到新手。 我的macOS自带是油python2.7的，但是我自己学的是python3.6。两个版本都不能用了，有可能影响到系统！ 要抓紧学习了！！</description></item><item><title>DML_Error_Logging特性</title><link>https://kentxxq.com/contents/dml_error_logging%E7%89%B9%E6%80%A7/</link><pubDate>Wed, 19 Jul 2017 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/dml_error_logging%E7%89%B9%E6%80%A7/</guid><description> 在工作中，常常要进行数据的临时备份，还有导入数据的需求。但是却因为在源数据中个别数据不合法，导致无法插入。 功能效果：
把合法的数据导入进入目标表 把不合法的数据插入一张指定的表，并且记录下原因 需要用到dbms包(10gR2后版本支持) SQL&amp;gt; DESC dbms_errlog.create_error_log Parameter Type Mode Default? ------------------- -------- ---- -------- DML_TABLE_NAME VARCHAR2 IN ERR_LOG_TABLE_NAME VARCHAR2 IN Y ERR_LOG_TABLE_OWNER VARCHAR2 IN Y ERR_LOG_TABLE_SPACE VARCHAR2 IN Y SKIP_UNSUPPORTED BOOLEAN IN Y SQL&amp;gt; --默认会创建ERR$_SOURCE表，在``第二个``参数可以自己输入表名 创建源表source的目标表dest BEGIN DBMS_ERRLOG.create_error_log (dml_table_name =&amp;gt; &amp;#39;SOURCE&amp;#39;); END; 在insert语句后按照固定格式填写 INSERT INTO dest SELECT * FROM source LOG ERRORS INTO err$_source(&amp;#39;INSERT&amp;#39;) REJECT LIMIT UNLIMITED;</description></item><item><title>mac启用ftp</title><link>https://kentxxq.com/contents/mac%E5%90%AF%E7%94%A8ftp/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mac%E5%90%AF%E7%94%A8ftp/</guid><description> mac下一般用smb服务来进行远程文件访问，但要用FTP的话，高版本的mac os默认关掉了，可以用如下命令打开:
# 开启 sudo -s launchctl load -w /System/Library/LaunchDaemons/ftp.plist # 关闭 sudo -s launchctl unload -w /System/Library/LaunchDaemons/ftp.plist</description></item><item><title>centos定时时间同步</title><link>https://kentxxq.com/contents/%E5%AE%9A%E6%97%B6%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%AE%9A%E6%97%B6%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</guid><description># 安装ntp软件 yum install ntp ntpdate # 与上海大学时间服务器进行时间同步 ntpdate ntp.shu.edu.cn # 每一小时进行一次时间同步、且写入硬件时间 crontab -e 0 * * * * /usr/sbin/ntpdate ntp.shu.edu.cn 0 * * * * /usr/sbin/hwclock -w</description></item><item><title>centos搭建vsftpd服务</title><link>https://kentxxq.com/contents/centos%E6%90%AD%E5%BB%BAvsftpd%E6%9C%8D%E5%8A%A1/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/centos%E6%90%AD%E5%BB%BAvsftpd%E6%9C%8D%E5%8A%A1/</guid><description> centos7默认最小安装中没有ftp服务。 vsftpd配置文件官方文档
下载安装后自动运行 yum install vsftpd 配置文件路径 [root@centos1 vsftpd]# pwd /etc/vsftpd [root@centos1 vsftpd]# ls ftpusers user_list vsftpd.conf vsftpd_conf_migrate.sh [root@centos1 vsftpd]# 注意事项 ftpusers是黑名单！所有名单中的用户名，都无法登陆ftp！
关于user_list：
userlist_enable Default: NO userlist_deny Default: YES
默认user_list设置为不启用。一旦启用userlist_enable，则文件生效
如果user_list生效，则userlist_deny则默认为YES，user_list变为一个黑名单！ 默认安装后的目录 anonymous用户的默认根目录为/var/ftp,应该给予/var/ftp路径所有用户的写权限chmod a+w /var/ftp
anonymous用户可以上传的目录/var/ftp/pub。
如果用root用户登陆，则可以访问任何路径！
只能下载不能上传，上传需要启用参数anon_upload_enable=YES和anon_mkdir_write_enable=YES
快速创建可以匿名上传下载的ftp 编辑/etc/vsftpd/vsftpd.conf
修改默认端口 listen_port=2121 可以匿名创建文件夹 anon_mkdir_write_enable=YES 可以匿名上传 anon_upload_enable=YES 匿名上传的文件默认权限 anon_umask=011 匿名用户可以进行删除操作 anon_other_write_enable=yes chmod 777 /var/ftp/pub 匿名的所有操作都是在下面这个文件夹中进行，/var/ftp目录只能进行读取
在ftpusers和user_list中删除root,方便root用户ftp登录进行管理操作
阿里云特殊设置 在vsftpd.config中加入下面的参数 pasv_enable=YES pasv_max_port=7000 pasv_min_port=6000 安全组中，加入6000-7000端口</description></item><item><title>chrome无法自动更新</title><link>https://kentxxq.com/contents/chrome%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/chrome%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</guid><description>chrome无法自动更新，并且没有为所有用户设置自动更新的问题 # 这里是删除用户文件夹下面的google还有根目录下面的文件google文件夹，应该是会重新下载新的部分模块。同时也可以正常启用为所有用户更新chrome sudo rm -rf /Library/Google &amp;amp;&amp;amp; sudo rm -rf ~/Library/Google</description></item><item><title>mac显示隐藏文件</title><link>https://kentxxq.com/contents/mac%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mac%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</guid><description>在终端下运行 # 显示 defaults write com.apple.finder AppleShowAllFiles -bool true # 隐藏 defaults write com.apple.finder AppleShowAllFiles -bool false</description></item><item><title>mysql_hugepages配置</title><link>https://kentxxq.com/contents/mysql_hugepages/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mysql_hugepages/</guid><description>在linux中，内存一般是2kb-4kb每页，如果是大内存，那么pagetables将会非常大。cpu在查找使用内存的时候，会比较慢。使用hugepages，一个内存页可以设置为2MB-1GB。从而可以加快对内存的访问速度。2MB-4MB，是适用于100GB一下的内存。 1GB则适用于TB级别的内存容量。
开始配置mysql适用hugepages [mysql@centos1 ~]$ cat /proc/meminfo MemTotal: 1016460 kB MemFree: 557140 kB MemAvailable: 551864 kB Buffers: 948 kB Cached: 121004 kB SwapCached: 0 kB Active: 313228 kB Inactive: 83928 kB Active(anon): 275372 kB Inactive(anon): 6524 kB Active(file): 37856 kB Inactive(file): 77404 kB Unevictable: 0 kB Mlocked: 0 kB SwapTotal: 839676 kB SwapFree: 839676 kB Dirty: 0 kB Writeback: 0 kB AnonPages: 275228 kB Mapped: 28304 kB Shmem: 6692 kB Slab: 35700 kB SReclaimable: 14504 kB SUnreclaim: 21196 kB KernelStack: 2208 kB PageTables: 4344 kB NFS_Unstable: 0 kB Bounce: 0 kB WritebackTmp: 0 kB CommitLimit: 1347904 kB Committed_AS: 1719888 kB VmallocTotal: 34359738367 kB VmallocUsed: 5468 kB VmallocChunk: 34359730176 kB HardwareCorrupted: 0 kB AnonHugePages: 4096 kB HugePages_Total: 0 HugePages_Free: 0 HugePages_Rsvd: 0 HugePages_Surp: 0 Hugepagesize: 2048 kB DirectMap4k: 32704 kB DirectMap2M: 1015808 kB 上面可以看出没有启用hugepages，默认hugepages每页大小为2mb。 而当前的pagetables为4344kB</description></item><item><title>mysqladmin</title><link>https://kentxxq.com/contents/mysqladmin/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mysqladmin/</guid><description> 这是一个非常好用的mysql工具，可以查看各种状态。
查看mysql数据库的运行状况 mysqladmin -u root -p status Uptime: 1368 Threads: 3 Questions: 85 Slow queries: 0 Opens: 116 Flush tables: 1 Open tables: 109 Queries per second avg: 0.062</description></item><item><title>mysql启动参数优化</title><link>https://kentxxq.com/contents/mysql%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mysql%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</guid><description>参数文件 [mysqld] ### # 基本相关配置 ### server-id=1 pid-file=/var/run/mysqld/mysqld.pid datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock # 在linux中，文件可以进行ln，类似快捷方式。如果设置为1，则有可能会出现安全问题，默认配置中设置为0，进行关闭 symbolic-links=0 # 设置数据库字符集 character_set_server=utf8mb4 # 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求 skip-name-resolve character_set_filesystem=utf8mb4 # 统一使用小写的表名 lower_case_table_names = 1 ### # 日志配置 ### log-error=/var/log/mysqld.log # 二进制日志路径 log-bin=/tmp/logbin # 超过30天的binlog删除 expire_logs_days = 30 # 慢查询时间 超过1秒则为慢查询 long_query_time = 1 slow_query_log_file = /tmp/mysql-slow.log ### # 性能提升参数 ### # mysql最大连接数 查看max_used_connections，在最大值的70%左右最好 max_connections = 1000 # 官方：8 + (max_connections / 100)，上限100. 缓存的线程池不应该过多。 # 暂时我的业务高峰期，估计是200+的并发一直保持。50个应该足够 # 一般来说，大于4G的内存，预先缓存50个线程没有问题 thread_cache_size=10 # 表缓存分为多个区。5.</description></item><item><title>mysql备份恢复</title><link>https://kentxxq.com/contents/mysql%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mysql%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</guid><description>into outfile，适合在工作中导出指定的报表数据等 mysqldump轮流进行锁表 innobakcupex(暂时发现最好用的备份工具，且开源) into outfile&amp;mdash;load infile # 导入到指定的文件位置 select * into outfile &amp;#39;secure_file_priv&amp;#39; fields terminated by &amp;#39;,&amp;#39; from test # 导入指定的文件到表 load data infile &amp;#39;/var/lib/mysql-files/20170628&amp;#39; into table test fields terminated by &amp;#39;,&amp;#39;; # 注意 secure_file_priv路径位置，否则无法导出 # 注意 表必须存在，然后导入数据。 并不是删除表后可以重建表 mysqldump导出为sql脚本，可以直接运行进行恢复 # 指定表 mysqldump -u root -p databasename tablename &amp;gt; /tmp/20170628_databasename_tablename.sql # 指定数据库 mysqldump -u root -p --databases databasename1 databasename2 &amp;gt; /tmp/20170628_databasename.sql # 备份全部数据库 mysqldump -u root -p -all-databases &amp;gt; /tmp/20170628_databasename.</description></item><item><title>mysql常用参数以及命令</title><link>https://kentxxq.com/contents/mysql%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E4%BB%A5%E5%8F%8A%E5%91%BD%E4%BB%A4/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mysql%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E4%BB%A5%E5%8F%8A%E5%91%BD%E4%BB%A4/</guid><description>参数 # 允许导出数据的文件路径 secure-file-priv 常用命令 # 查看当前mysql版本支持的存储引擎 show engine # 查看当前的参数 show variables show variables like &amp;#39;%engine%&amp;#39; # 查看安装的插件 show plugins; flush # 一台机器只能保持一定的连接，如出现max_connect_errors问题 flush hosts # 关闭当前的日志文件，后续的日志记录到新的文件 flush logs # 新建用户，修改权限之后，需要立即刷新，否则很有可能无法使用 flush privileges # 把内存中的数据写入到表内 flush tables # 锁住所有表以及解锁 flush tables with read lock unlock tables # 内存中的数据碎片整理 flush query cache reset # 清空所有缓存 reset query cache</description></item><item><title>mysql首次使用出现的问题</title><link>https://kentxxq.com/contents/mysql%E9%A6%96%E6%AC%A1%E4%BD%BF%E7%94%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/mysql%E9%A6%96%E6%AC%A1%E4%BD%BF%E7%94%A8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>关于中文问题 默认安装后的sys库不进行修改 在新建数据库时,进行数据库字符集的设置,推荐utf8 关于mysql引擎问题 普遍使用innodb、myisam两种。前者支持事务、后者有更快的查询速度和索引 在建表后加engine=utf8 查看当前支持的mysql引擎 show engines 查看mysql安装后的初始密码 grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log 让指定用户可以进行远程连接 [root@centos1 test]# mysql -uroot -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \g. Your MySQL connection id is 7 Server version: 5.7.18 MySQL Community Server (GPL) Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates.</description></item><item><title>yum的配置和使用</title><link>https://kentxxq.com/contents/yum%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/yum%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</guid><description> yum是用来安装、更新、卸载、管理软件包的工具。rpm安装包因为存在依赖其他rpm软件包的问题，yum用来更加方便的解决这些问题。
在/etc中存在有
yum 版本以及插件信息 yum.conf 配置信息 yum.repos.d 配置从哪个源来对比进行操作 常用命令 # 安装 yum install software # 卸载 yum remove software # 查看所有源 yum repolist # 查看所有可用的源 yum repolist enable 解决国外源,下载速度慢的问题,使用阿里云 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo # 163网易源 http://mirrors.163.com/.help/CentOS7-Base-163.repo 只需要更新指定的安全补丁 # 老版本安装yum插件即可、新版本centos7直接使用 yum install yum-security # 使用:检查安全更新 yum --security check-update # 只安装安全更新 yum update --security # 列出更新的详细信息 yum info-security software_name</description></item><item><title>修改mac主机名</title><link>https://kentxxq.com/contents/%E4%BF%AE%E6%94%B9mac%E4%B8%BB%E6%9C%BA%E5%90%8D/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E4%BF%AE%E6%94%B9mac%E4%B8%BB%E6%9C%BA%E5%90%8D/</guid><description> 问题出现的原因是，我从城市A回到城市B的时候，打开我的mac终端，发现我前缀居然发生了变化
192:~ kentxxq$ 很遗憾，之前是什么我都给忘了，应该是类似kentxxq&amp;rsquo;s macbookpro类似的。肯定不是这个192,类似ip第一个占位的数字
通过下面的语句进行修正
sudo -scutil --set HostName &amp;#39;kent’s MacBook Pro&amp;#39; 重启后效果为
kent’s MacBook Pro:~ kentxxq$ 延伸部分 # 启用root用户并且创建密码 sudo -i</description></item><item><title>搭建基本的centos环境</title><link>https://kentxxq.com/contents/%E6%90%AD%E5%BB%BA%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E6%90%AD%E5%BB%BA%E5%9F%BA%E6%9C%AC%E7%9A%84%E7%8E%AF%E5%A2%83/</guid><description>第一步&amp;ndash;创建virtual box虚拟机 第二步&amp;ndash;默认安装、最小化安装 使用的iso为CentOS-7-x86_64-Everything-1611.iso centos官网下载
配置root用户密码、新建用户等
第三步&amp;ndash;网卡配置 ssh root@192.168.0.222 cd /etc/sysconfig/network-scripts ifcfg-enp0s3 使用的网卡
ifcfg-lo 回环
配置ifcfg-enp0s3,其中UUID无需更改
[root@centos1 network-scripts]# cat ifcfg-enp0s3 TYPE=Ethernet BOOTPROTO=static DEFROUTE=yes PEERDNS=yes PEERROUTES=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_PEERDNS=yes IPV6_PEERROUTES=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=enp0s3 UUID=774dda00-53bc-49d3-9b7a-ea38e397ba84 DEVICE=enp0s3 ONBOOT=yes IPADDR=192.168.0.222 NETMASK=255.255.255.0 GATEWAY=192.168.0.1 重启服务即可正常使用
[root@centos1 network-scripts]# service network restart Restarting network (via systemctl): [ 确定 ] [root@centos1 network-scripts]# ping baidu.com PING baidu.com (111.13.101.208) 56(84) bytes of data. 64 bytes from localhost (111.13.101.208): icmp_seq=1 ttl=54 time=38.</description></item><item><title>远程免密ssh</title><link>https://kentxxq.com/contents/%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86ssh/</link><pubDate>Tue, 06 Jul 1993 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%BF%9C%E7%A8%8B%E5%85%8D%E5%AF%86ssh/</guid><description># 生成公钥和密钥 kent’s MacBook Pro:bin kentxxq$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/Users/user/.ssh/id_rsa): #回车 Enter passphrase (empty for no passphrase): #密码 Enter same passphrase again: #密码 Your identification has been saved in /Users/user/.ssh/id_rsa. Your public key has been saved in /Users/user/.ssh/id_rsa.pub. The key-s fingerprint is: SHA256:4/PI3lPzkOvli9Vvaz0WRAd8WE4m6gtVW7ARILmeLU0 kentxxq@kent’s MacBook Pro The keys randomart image is: +---[RSA 2048]----+ | ...oB*=| | .. oo@o| | .</description></item></channel></rss>