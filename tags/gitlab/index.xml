<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gitlab on kentxxq Blog</title><link>https://kentxxq.com/tags/gitlab/</link><description>Recent content in gitlab on kentxxq Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 06 May 2019 16:56:00 +0000</lastBuildDate><atom:link href="https://kentxxq.com/tags/gitlab/index.xml" rel="self" type="application/rss+xml"/><item><title>gitlab手摸手排坑</title><link>https://kentxxq.com/contents/gitlab%E6%89%8B%E6%91%B8%E6%89%8B%E6%8E%92%E5%9D%91/</link><pubDate>Mon, 06 May 2019 16:56:00 +0000</pubDate><guid>https://kentxxq.com/contents/gitlab%E6%89%8B%E6%91%B8%E6%89%8B%E6%8E%92%E5%9D%91/</guid><description>公司准备趁着项目重写的契机，准备从svn切换到git。于是也出现了很多的坑。
技术选型 之前写过一篇关于gitea的文章，但是这一次我选择了gitlab。
资源占用 先展示一下采用docker运行后的对比sudo docker stats
可以看到gitlab使用了3GB以上的内存！我的天。
我就一个代码仓库啊！就我一个用户正在用啊！cpu时不时飙到了30%是什么鬼啊！
进入到gitlab后台管理监控，直接吓尿。。
为了ci，选了gitlab ci有很多，jenkins,gitlab ci,drone,travis ci等等。
jenkins的界面我是真的不喜欢。操作也比较繁琐，没有一个单独文件来的直观。虽然貌似功能(插件)很丰富？！适合有过经验的人
travis ci是因为github才被了解到的。可惜不开源，就不考虑了。适合开源项目用
drone的缺点就是没有很好的集成到一起，文档也不够全面，再加上了解的过程中，网友们遇到了不少坑。适合想硬件资源比较紧张/对go非常感兴趣/喜欢尝试新鲜事物的(排坑是必须的)
gitlab ci开源。有广大的用户群。文档完善。与gitlab集成非常好。唯一缺点就是对硬件要求比较高
开始部署 安装docker 安装运行gitlab。根据官方文档，我修改了默认的端口。同时取消了22和443端口的映射。因为用不上啊。 # 要点: # 1. 确保存在/data文件夹 # 2. restart always代表每次重启docker服务，都会启动它 sudo docker run --detach \ --hostname yhserver \ --publish 1080:80 --name gitlab \ --restart always \ --volume /data/gitlab/config:/etc/gitlab \ --volume /data/gitlab/logs:/var/log/gitlab \ --volume /data/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce:latest 安装运行gitlab runner并且注册，推荐使用推荐的方法，也就是yum安装gitlab runner。这里需要注意的是，如果你需要构建docker镜像，推荐使用shell作为executor。 在项目中添加.</description></item></channel></rss>