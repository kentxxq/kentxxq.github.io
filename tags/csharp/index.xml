<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Csharp - 标签 - 运维个人技术栈</title><link>https://kentxxq.com/tags/csharp/</link><description>Csharp - 标签 - 运维个人技术栈</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>admin@kentxxq.com (kentxxq)</managingEditor><webMaster>admin@kentxxq.com (kentxxq)</webMaster><lastBuildDate>Wed, 09 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kentxxq.com/tags/csharp/" rel="self" type="application/rss+xml"/><item><title>Transfer-Encoding和Content-Length</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/transfer-encoding%E5%92%8Ccontent-length/</link><pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/transfer-encoding%E5%92%8Ccontent-length/</guid><description>简介我开发 pusher 的时候对接了 Qmsg酱, 中间遇到了一些问题, 是关于 Transfer-Encoding 和 Content-Length 这两个 Header. 问题处理我通过 HttpClient 发送请求的代码如下 csharp var httpResponseMessage = await httpClient.PostAsJsonAsync(url,data) 报错信息 csharp System.Net.Http.HttpRequestException: An error occurred</description></item><item><title>csharp知识碎片</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%9F%A5%E8%AF%86%E7%A2%8E%E7%89%87/</guid><description>简介这里记录在使用 csharp 的过程中学习的内容, 主要是碎片化的知识点. 语言特性 属性和字段 csharp public class Person { private int age; // 这是一个字段field public int Age // 这是一个属性</description></item><item><title>csharp的json教程</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%9A%84json%E6%95%99%E7%A8%8B/</link><pubDate>Wed, 27 Sep 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%9A%84json%E6%95%99%E7%A8%8B/</guid><description>简介介绍 csharp 关于 json 的用法. 本文的所有源码均存放在 kentxxq/csharpDEMO (github.com). 为什么会有这篇文章? 因为 json 非常的流行, 而且存在有很多细节. 例如性能, 格式, 类库用法等等. 准</description></item><item><title>csharp编码风格</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%BC%96%E7%A0%81%E9%A3%8E%E6%A0%BC/</guid><description>简介csharp 的 官网编码风格 的总结如下 代码质量分析 CAxxxx 是质量格式 代码样式分析 IDExxxx 是样式格式, 同时还包含 pascal_case 这样的命名格式 Language rules 语言规则 Formatting rules 格式规则</description></item><item><title>csharp性能调试</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E6%80%A7%E8%83%BD%E8%B0%83%E8%AF%95/</link><pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E6%80%A7%E8%83%BD%E8%B0%83%E8%AF%95/</guid><description>简介记录 csharp 的性能调试. #todo/笔记 所有的 dotnet 全局工具在这里 .NET Diagnostic tools overview - .NET | Microsoft Learn 调试工具 采集所有监控数据dotnet-monitor 查看 dotnet 应用</description></item><item><title>csharp代码配置</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE/</link><pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE/</guid><description>简介记录 csharp 的代码配置仅在开发过程中会用到。 配置 数据库连接字符串 Mysql text Server=ip或域名;Database=数据库;Uid=root;Pw</description></item><item><title>csharp安装</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E5%AE%89%E8%A3%85/</guid><description>简介csharp 的安装和排错. 安装.NET 和 Ubuntu 概述 - .NET | Microsoft Learn 通常 ubuntu 22.04 以及以上版本自带. shell # 搜索 apt search dotnet # 安装这个整合包即可 apt install dotnet7 排错如果使用过</description></item><item><title>csharp项目配置</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</link><pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</guid><description>简介csharp 的项目配置文章中，没有任何代码相关内容。 常用命令 dotnet-new 模板 shell # 新建git项目,clone下来后使用。建议用 kentxxq.Kscheduler 标识.产品名 # 创建一</description></item><item><title>OpenTelemetry实践</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/opentelemetry%E5%AE%9E%E8%B7%B5/</link><pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/opentelemetry%E5%AE%9E%E8%B7%B5/</guid><description>简介这篇文章会把关于 OpenTelemetry 的相关文章串联起来, 从 0 到 1 完成所有的实践. 其中会涉及到如下组件, 搭建顺序是从下往上: APP代码放着这里,是 csharp-aspnetcore Web 应用 引</description></item><item><title>sharp的efcore命令</title><link>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%9A%84efcore%E5%91%BD%E4%BB%A4/</link><pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate><author><name>kentxxq</name></author><guid>https://kentxxq.com/posts/%E7%AC%94%E8%AE%B0/csharp%E7%9A%84efcore%E5%91%BD%E4%BB%A4/</guid><description><![CDATA[简介这里记录 csharp 的 efcore 命令. 内容 数据库连接池配置文件 appsettings.json json { &#34;Logging&#34;: { &#34;LogLevel&#34;: { &#34;Default&#34;: &#34;Warning&#34; } }, &#34;AllowedHosts&#34;: &#34;*&#34;, &#34;ConnectionStrings&#34;: { &#34;BloggingDatabase&#34;: &#34;Data Source=your_server_ip;Database=your_database_name;User ID=your_username;Min Pool Size=10;Password=your_password;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False&#34; } } 注入依赖 csharp services.AddDbContextPool&lt;BloggingContext&gt;( options =&gt;{ options.UseSqlServer(Configuration.GetConnectionString(&#34;BloggingDatabase&#34;)); } ,poolSize:64 );]]></description></item></channel></rss>