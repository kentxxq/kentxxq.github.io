<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>笔记 on kentxxq Blog</title><link>https://kentxxq.com/tags/%E7%AC%94%E8%AE%B0/</link><description>Recent content in 笔记 on kentxxq Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sun, 29 Mar 2020 17:24:00 +0000</lastBuildDate><atom:link href="https://kentxxq.com/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>一个我需要的win10</title><link>https://kentxxq.com/contents/%E4%B8%80%E4%B8%AA%E6%88%91%E9%9C%80%E8%A6%81%E7%9A%84win10/</link><pubDate>Sun, 29 Mar 2020 17:24:00 +0000</pubDate><guid>https://kentxxq.com/contents/%E4%B8%80%E4%B8%AA%E6%88%91%E9%9C%80%E8%A6%81%E7%9A%84win10/</guid><description>把我的MacBook Pro2016带bar款咸鱼线下退掉了。入手了小新pro13的2020款。于是就操作了很多的东西，学到了很多。记录一下吧。
win本前传 为什么要换win本 换电脑我和家里人说了这件事情。都说为什么要换呢？你本来用的是苹果电脑呀。你之前用的是苹果手机呀。当然我还有苹果的AirPods之类的产品。也包括有我的同事不理解。
我大概是从去年2019年想着要换的。
让我有这个想法的原因是我连接省厅的服务器，需要用vpn先连接到内网。而easyconnect对mac支持糟糕至极。我尝试过多次，还是失败了。我都是通过teamviewer去连接公司的win台式机操作的，非常蹩脚的体验。 我体验了netCore。感觉非常不错。对比同级别的java，体验好非常多。一站式解决我所遇到的问题。而win上的支持是比mac要好的。 我从最开始的不屑于微软。到后来github被收购开放免费个人仓库。vscode的超级好用。wsl技术的存在。以及到现在的npm被收购。我觉得我所有喜欢的东西都被微软囊括了。同时体验都非常好，让我开始重新审视微软的一切。并开始喜爱它。 换win本的考量 具体有几点需求：
好一点的屏幕~其实我很希望是15.6的屏幕，但是考虑到便携的问题。所以我的想法转变为可以接受外接一个4k60hz的屏幕 不错的性能~因为我经常需要多开很多的标签页、使用docker、由奢入俭难，不能比mac体验差很多 合理的价格区间~我的第一台mac让我分期了3个月，虽然这几年让我学到了很多知识，但现在再花这个价钱买电脑，我是舍不得的 由于之前我有一台联想的g460电脑，虽然是老古董了。但是却一直用到现在。家里的台式机有部件坏了。于是我妹妹拿着在上网课，并且在通过我的指导，学习一点点python！哈哈。所以我对联想的质量是很有信心的。
对比y9000x和小新pro13，我还是选择了小新。原因是便携。加上typec也可以直出4k60hz，用mx350显卡也不会担心掉帧。价格也便宜了好几百，于是买了传说中的真香机。
win本实际体验 机器体验 性能足够满足我自己的需求。16g的内存对我来说，用起来很放心。 屏幕适配不是太好，但是显示效果不错。 做工确实不是太好，但是我觉得不影响。对我来说，这台电脑比我的mac好用多了。 键盘全是不是太好，但是我也体验了4年的蝶式键盘。适应性很强。。现在觉得半斤八两。 这么多的但是，说明了我充满了妥协呀。是的！因为我想要的是台式机！但是前提是在自己的房子里。所以再来看以后我连接上4k60hz的显示器和其他外设。便会觉得没什么不好的。便携加性能不错更加能触动我。
wsl2 我要换win本，一个很大的原因是大多数情况下。服务器都是linux的。而docker不太适合用来进行linux体验。win上的wsl2完美解决了这个痛点。
实测速度很快，基本可以做到秒起。而docker的edge版本，也支援了wsl2。
可以直接访问宿主机win上面的文件。 可以在linux内使用我的docker命令。 可以通过vscode远程连接到linux内部进行代码开发，和服务器一致的linux开发体验 做任何我想在linux上做的一切。相当于一个windows界面的linux电脑！ 微软大刀阔斧，哪怕是最为厉害的windows也开始了极大的变化。打造了一个我认为最强大的系统，没有之一。程序员有什么理由再嫌弃windows呢？
更好的vs使用体验 vs一直号称宇宙最强ide。同时我看中的可能和大家都不一样。我喜欢的是winform。
众所周知，windows的占有率是极高的。而我自己有一个win本，可以通过winform快速拖拽窗口创建性能非常不错的c#工具。同时可以传阅给亲朋好友。至于其他的跨平台方案。在大多数都是win的现实世界中，没有比他更方便的了。
同时我有用过clion，觉得比起来vs，更难用。如果我要免费学习c/c++知识。我自认为vs是一个更好的平台。有了wsl的加持，还有什么能限制你呢？
edge！ 为什么要单独写出来呢？因为chrome虽然很好。但是也有不好的地方。我来说说我喜欢的地方吧。
edge后续会出一个官方版的兼容ie模式。这一点是chrome没有做，而且不可能会比edge做的更好的地方。 chrome的很多功能都需要科学上网，而edge则不用。 edge比起来chrome更多与底层操作系统，特别是windows的结合。蜜汁体验加成。 chrome的市场份额太大了，已经变成了恶龙。而微软的edge却变成了勇敢的少年。更多更快得对同一标准的支持，提升了作为开发者的体验。 总结 先这样吧。其实在我使用mac的过程中，一直也都没有离开过win本，但是我知道。离开了mac，我估计我就不会再去用macOS了。
因为台式机的性能和游戏是不可替代的。同样时间背景下，苹果通过品牌溢价和其他一些对我而言不适用的开销。不是我想要的。
因为win本已经满足了我的需求。我不会开发专门的ios应用。所以mac不是我的必备。偶尔我也可以租用mac来编译ios代码。
因为在今天的我看来，苹果已经没有了以前那种创新。而微软却在转变。转变成一个无比高效的平台。</description></item><item><title>常用的信息手册</title><link>https://kentxxq.com/contents/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF%E6%89%8B%E5%86%8C/</link><pubDate>Fri, 22 Nov 2019 01:31:00 +0000</pubDate><guid>https://kentxxq.com/contents/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BF%A1%E6%81%AF%E6%89%8B%E5%86%8C/</guid><description> 在整理自己的代码文件，同时也觉得需要自己记录一下常用的模块或者工具才行。比如操作Excel文件，我每次都不记得上次用的是哪个库，为什么那个库好用。
DNS # alibaba 223.5.5.5 223.6.6.6 # BaiduDNS 180.76.76.76 # tencent 119.29.29.29 182.254.116.116 # 114 114.114.114.114 114.114.115.115 # google 8.8.8.8 8.8.4.4 # Cloudflare 1.1.1.1 # boss 1.2.4.8 210.2.4.8</description></item><item><title>补充一些数据结构的知识</title><link>https://kentxxq.com/contents/%E8%A1%A5%E5%85%85%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 04 Nov 2019 01:10:00 +0000</pubDate><guid>https://kentxxq.com/contents/%E8%A1%A5%E5%85%85%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E7%9F%A5%E8%AF%86/</guid><description>在之前做爬虫练手的时候，去爬的Porn网站。影片简介其中有一项就是影片时长。而在我后来的一段时间，发现很多影片网站是没有时长信息的。要知道影片的时长信息其实是非常重要的，需要作为一个筛选的条件。
于是开始尝试自己来用python编写获取在线视频时长的工具。而后这段时间在看了c和c#相关的知识后，开始有了更为深入的了解。也遇到了一些在python中没有详细了解过的问题。
在线视频现状 现在html5越来越流行，flash则已经确定在2020年后不再更新支持，每次打开chrome都会提醒我这一点。
而html5钦定的视频文件格式，就是mp4文件。所以从mp4文件来入手是非常好的。
mp4是一种文件格式。通过规范后的数据结构编排，生成文件。而软件则通过规范来解码文件，进行画面的绘制和输出。几乎所有的文件都是用c/c++的结构体来进行组装的。所以学习c语言对理解文件结构很有帮助。
可以参考苹果网站的文档查阅规范
我的解决方案 python 一开始我搜索已有的解决方案。
ffmpeg是一个很强的工具。跨平台且可以解析各种文件，但是ffmpeg需要单独部署，且不方便代码移植。我在用python通过命令行来调用的时候，发现速度奇慢。2小时才解析了200多条信息，且会无故hang住。对程序来说，也算是一个黑箱操作。无法调试。
随后发现ffmpeg-python这个库可以帮我操作，但还是觉得麻烦。我需要了解一套新的api，以及它所对应到的ffmpeg接口。
当你在在chrome中通过浏览器打开一个mp4文件的时候，会直接播放。且带有时长。
在之前了解爬虫的过程中，一些难搞的网站，是可以使用selenium来操作的。使用一个真正的浏览器来进行数据采集。于是我进行了尝试。
但是这样的效率同样不高。现在的浏览器越来越复杂和庞大。
那么浏览器是如何获取到时长的呢？肯定是有方法的。我只要了解原理，然后用python写出来即可。
首先需要了解http(s)请求中一个非常重要的header头，Range。
状态码为200系列，代表不同的请求成功了。而你带上&amp;quot;Range&amp;quot;:&amp;quot;bytes=0-7&amp;quot;请求去请求一个在线的mp4文件，正常情况下(大部分服务端都支持)会拿到206的状态码。代表你请求的数据成功了。你拿到了这个mp4前8个字节的数据。
于是我们的需求变成了从mp4文件中获取到存储时长信息的那几个字节。对照之前的苹果文档，我便写出了如下的代码。
# coding:utf-8 import struct import requests class Mp4info: def __init__(self, file): self.file = file self.seek = 0 self.duration = 0 self.s = requests.session() self.timeout = 6 self.s.headers = { &amp;#39;Connection&amp;#39;: &amp;#39;keep-alive&amp;#39;, &amp;#39;Accept&amp;#39;: &amp;#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8&amp;#39;, &amp;#39;Accept-Encoding&amp;#39;: &amp;#39;gzip, deflate&amp;#39;, &amp;#39;Accept-Language&amp;#39;: &amp;#39;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7&amp;#39;, &amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.</description></item></channel></rss>