<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>server on kentxxq Blog</title><link>https://kentxxq.com/tags/server/</link><description>Recent content in server on kentxxq Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Tue, 25 Feb 2020 10:00:00 +0800</lastBuildDate><atom:link href="https://kentxxq.com/tags/server/index.xml" rel="self" type="application/rss+xml"/><item><title>微信小程序自动化部署</title><link>https://kentxxq.com/contents/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</link><pubDate>Tue, 25 Feb 2020 10:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</guid><description>公司先阶段使用的是通过ansible来进行多服务器的部署。而微信小程序开发者工具官方只放出来了windows和mac版本。
macOS老早就听说虚拟机需要超高的配置，而且也会很卡。自己也没有操作过，对mac的虚拟机没什么兴趣。估计以后也用不大上。否则也不会有那么多人去用黑苹果了。
所以就开始了这次在windows机器上的踩坑之旅。
基本环境介绍 本次操作是在win10上进行的。
远程操作使用的jenkins是Ubuntu系统。
远程操控端Ubuntu环境搭建 默认linux都是有python环境的。但是不一定有pip。这是python的一个包管理工具。很多需要用到的工具包，都需要用pip来进行安装。
操作步骤
在Ubuntu中，可以使用apt install python-pip命令安装。 输入pip命令，确认安装完成。 pip install pywinrm win10被控端环境搭建 由于windows和mac/linux不一样，没有ssh远程连接。所以ansible是通过pywinrm模块，进行操作的。
系统要求
net要3.0以上。在powershell输入$host获取net版本。 powershell也要3.0以上。在powershell输入$psversiontable获得ps版本。 系统推荐使用win10。 操作步骤
set-executionpolicy remotesigned (可以用get-executionpolicy验证) 下载并使用管理员powershell运行此配置脚本 winrm quickconfig 快速配置启用 winrm set winrm/config/service &amp;lsquo;@{AllowUnencrypted=&amp;ldquo;true&amp;rdquo;}&amp;rsquo; winrm set winrm/config/service/auth &amp;lsquo;@{Basic=&amp;ldquo;true&amp;rdquo;}&amp;rsquo; 在ansible脚本内配置变量 [windows] 1.1.1.1 [windows:vars] ansible_ssh_user=username ansible_ssh_pass=password ansible_ssh_port=5985 ansible_winrm_transport=ntlm ansible_connection=winrm ansible_winrm_server_cert_validation=ignore 具体流程 由于很多东西不方便直接贴代码，所以这里列出大概的流程
jenkins拉下代码以后，开始执行ansible脚本。(在jenkins内部把用户名和密码等变量写好，通过&amp;ndash;extra-vars方式传递) 通过win_file模块创建文件夹，win_copy模块拷贝代码到windows机器上。 - name: 拷贝最新代码到win目录 win_copy: src: &amp;#34;/local_workspace_path/&amp;#34; dest: D:\wechat_workspace\{{ build_number }} 用win_command来安装依赖。构建代码同理。 - name: 在win上安装依赖 win_command: cmd.</description></item><item><title>ansible的学习</title><link>https://kentxxq.com/contents/ansible%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Sat, 11 Jan 2020 23:46:00 +0800</pubDate><guid>https://kentxxq.com/contents/ansible%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>ansible是一个比较流行的服务器集群管理软件。在之前我有对比过监控软件，所以了解到ansible。
但是因为监控较弱，加上网上所说的性能问题，没有继续研究下去。只知道基于ssh。所以不需要被控端多做操作。
正好面试的公司现在是基于ansible运维，所以肯定要学学了。
ansible概览 ansible优点
基于python。我也比较熟。 基于ssh实现服务，所以被控端不需要做操作。 有官方的维护，人数使用也多。所以社区庞大，各种模块更加好用。 安装 安装其实还是比较简单的。使用默认linux的包管理器就好。
其中macOS也可以使用brew安装。但是需要指出的是配置文件默认是没有的。
在linux下，默认配置文件都放在/etc/ansible/ansible.cfg目录下。
而macOS则默认没有。可以自建.ansible.cfg文件放到用户目录下。而在文件内有一句inventory = /path/hosts，就是用来指定主机列表的文件。
如果设定没有问题。你就可以使用ansible --version验证配置。
编写hosts文件 这个文件是用来存放主机清单的，其中a=1代表一个变量。是这个主机独享的变量。也可以设置组变量。
[webservers] 1.1.1.1 a=1 1.1.1.2 [webservers:vars] b=2 [dbservers] 2.2.2.1 2.2.2.2 指定主机 第一个参数通常用来指定使用主机。
all代表所有主机 dbservers则代表数据库下面的所有主机清单 其中:代表与，&amp;amp;代表或，!代表非。也可以使用通配符和正则表达式。 常用命令 ansible代表主程序，最常用。 ansible-doc查看文档。 ansible-playbook运行脚本。 常用模块 通过-m参数可以指定使用的模块。
ansible -m ping all可以验证主机是否能联通。
command是默认模块，但是对通配符或者管道符不好。 shell代表使用shell模块。通常shell命令用这个。 script代表脚本模块。在本地写好一个shell文件，然后通过此模块在远程主机上执行，但是要注意目标版本是否和脚本兼容。 copy代表拷贝文件。其中src参数指定文件或目录，dest代表远程目录，mode=000代表权限，owner代表文件所有者。 fetch代表提取文件，相当于反向拷贝。 file可以操作文件。path指定文件路径。state=link配合src和dest则可以设置软连接，absent递归删除，touch文件，directory代表文件夹。 cron代表linux自己的定时任务。job指定命令，name指定名称且禁用的时候必须指定，默认新增、disabled=true可以关掉。 yum安装包。通过name指定包名(可以是被控端的本地rpm)且可以逗号隔开。state默认安装、absent卸载。 service管理服务。 user管理用户。 playbook 前面所说的都是通过单独的命令进行操作，而playbook则属于脚本。完成一系列的操作。
--- - hosts: all remote_user: root tasks: - name: install some package yum: name=sl state=latest notify: updated some package when: ansible_distribution_major_version == &amp;#34;8&amp;#34; name: start some service service: name=nginx state=started handlers: - name: updated some package shell: echo &amp;#34;updated sl package&amp;#34; 上面包含了一个基本的playbook，采用的是yml语法。</description></item><item><title>linux各个发行版本对比</title><link>https://kentxxq.com/contents/linux%E5%90%84%E4%B8%AA%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC%E5%AF%B9%E6%AF%94/</link><pubDate>Fri, 08 Mar 2019 10:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/linux%E5%90%84%E4%B8%AA%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC%E5%AF%B9%E6%AF%94/</guid><description>纠结过很久这个问题，结论最终是选择Centos。
写一篇日志，如果以后改变了选择，那肯定是因为随着系统的迭代，优缺点出现了不同。
各大主流发行版 Debian/Ubuntu系列 非常棒的发行版。用户量很大，更新也很及时。优点如下：
包管理工具采用apt，包数量很多，非常方便。 分unstable，testing，stable版本。unstable版本不稳定，但是紧跟内核。testing漏洞补丁一般是最慢，但是毕竟稳定不少。stable新特性最慢，但是坚如磐石。 对开发人员友好，很多的工具都在Debian进行ci测试。 Ubuntu是Debian的下游，说是很友好。但是漏洞修补慢，unstable的包很不稳定。
实在不知道为什么不用Debian。就为了一个官方版本的网易云音乐吗？
Centos/RHEL/Fedora系列 我见过用户量最大，文档最齐全(这里也包括博客等文档)的发行版。优点如下:
RHEL是最大的商业linux公司支持的。内核贡献度第一。技术实力强，稳。 文档最齐全，解决问题参考方案特别多。 企业用户量大，如果公司有钱，出问题一个电话给你商业支持。 兼容性好。如果有商业支持，会有各种神奇的补丁解决问题。 没钱就用Centos稳。有钱人就用RHEL，出问题有人接锅。
个人开发，追求内核更新速度，想体验最新特性用Fedora。
arch系列 爱折腾技术的极端分子。优点如下:
永远滚动更新。 追求精益求精，什么都自己来，包括自己编译。不要任何一点冗余。 官方文档是典范。甚至可以当linux的参考教程来用。 linux各版本的取舍 抛开需求，谈取舍是完全没有意义的。所以我的选择过程，可以给读者作参考。
人生苦短，我用python。所以我就不会用arch系列&amp;hellip;.等哪天财务自由再说吧 用linux最重要的就是，解决问题。不然为什么不用win10呢？所以我做了不同系统的尝试 我遇到的问题 尝试Debian的原因 vps里想要bbr特性，内核要上到4.9，总觉得Centos自己升级内核，没Debian的默认好。 使用testing或者unstale，类似滚动更新，一劳永逸啊！ apt的包多啊，比如ss-libev直接一下就能搜到。Centos还要去加copr源，跟进也不够及时 以后linux来办公，那服务器和工作站就相同环境了呀，Centos可能不好看 死心的原因 可能也是因为我太懒了，折腾不出来
按照官方教程，Cockpit在Centos上完全正常。Debian上登陆以后空白，出现一个send_async(好像是这个)的错误。找了一下资料，无果&amp;hellip; Centos安装图形化界面+Tightvnc，官方一步一步走，ok。debiban需要配置xstartup。这个xtartup脚本我折腾了好久，结果只能出来一个gnome经典界面，没有特效。。 另外一个xtartup配置出来了xfce的界面。。 效果不理想 我在用Centos的几年里，没有遇到过依赖问题。可能是我只用到了皮毛。但是Debian却在2天内让我遇到了。可能是包更新的速度，有的快，有的慢导致的，很头疼。 驱动问题。Centos因为维护时间长，变化不大。只要安装好了显卡驱动，一次就能跑好多年。而如果用了Debian，我看了一些文档，说nvidia的驱动都要改动内核还是什么的。很有可能哪次更新内核，就会挂。 这一点只是我的担心，没有实际操作过 如果我使用桌面版本，Fedora似乎更新，桌面使用更加友好。pipenv这样的工具，在官方github上对Fedora也有特别照顾。同时redhat的许多工程师，都是在致力于Fedora的bug修复，稳定性我也觉得不会比Debian的差到哪去。 个人原因 我一直以来都是接触的Centos,所以更加熟悉它。
服务器大量都是Centos系列，如果我客户端使用Fedora，对以后Centos服务器升级，也是有帮助的。这和我的工作内容有关。
读者可能遇到的问题 qq 推荐用chrome浏览器运行安卓版本qq就好了。或者参考docker-qq
听歌 推荐listen1，跨音乐平台收藏听歌！
office wps有linux版本了。</description></item><item><title>开发以及运维的流程-docker</title><link>https://kentxxq.com/contents/%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8A%E8%BF%90%E7%BB%B4%E7%9A%84%E6%B5%81%E7%A8%8B-docker/</link><pubDate>Thu, 03 Jan 2019 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8A%E8%BF%90%E7%BB%B4%E7%9A%84%E6%B5%81%E7%A8%8B-docker/</guid><description>开发以及运维的流程-docker
个人开发以及部署 github提交代码 触发webhook，通过脚本让服务器上的容器停止，清除，重新打包，部署 从拿到centos服务器开始 安装系统所需的repo #官方的拓展库 sudo yum install epel-release -y #Rpmfution只会分发red hat的规范不允许使用的库，它依赖于epel sudo yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm sudo yum install https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-7.noarch.rpm #Elrepo 专注于硬件的驱动程序，比rpmfusion要多一些些，例如kmod同时还有内核，非常有用 rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org rpm -Uvh https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm # 如果你需要超级高版本的git或者php之类的，可以看看这个库 # 先默认用base里的，如果版本不能满足，那么就search一下，指不定能用上里面测试过的，兼容性好的包 sudo yum install centos-release-scl unzip -y # 更新到最新的版本 sudo yum update -y 配置我所需要用到的服务 #Nginx 我的http代理 sudo vi /etc/yum.repos.d/nginx.repo [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/ gpgcheck=0 enabled=1 #shadowsocks 翻墙工具c版本 sudo vi /etc/yum.repos.d/shadowsocks.repo [librehat-shadowsocks] name=Copr repo for shadowsocks owned by librehat baseurl=https://copr-be.</description></item><item><title>转到hugo后的架构</title><link>https://kentxxq.com/contents/%E8%BD%AC%E5%88%B0hugo/</link><pubDate>Sun, 23 Dec 2018 00:00:00 +0800</pubDate><guid>https://kentxxq.com/contents/%E8%BD%AC%E5%88%B0hugo/</guid><description> 趁着从jekyll转hugo，也重新来规划一下自己的个人网站以及代码部署架构。
转到hugo 之前有写过一篇笔记对比。但是使用的是jekyll。为什么切换成hugo呢？说一下jekyll主要缺点
需要ruby的环境，本地编译生成静态网站。麻烦 因为以后都会用下去，所以以后多了，难免会比较慢，快一点 可以更方便的切换主题。改动量更小 archetypes很好用，很方便 后面的改动，具体参考开发以及运维的流程吧
访问架构 第一层用nginx来代理，同时它也用来分发请求 第二层直接可以跳转到github/blog/个人项目 代码结构 全部存放在github私人仓库
服务器使用centos，完成所需服务的配置。例如ss，bbr，docker之类的 部署nginx好服务 放好触发代码部署的钩子 第一次手动触发钩子。所有的服务就启动好了 20190110 更新 github被微软收购以后，居然免费了？！不过分担心盈利问题了以后，就是不一样。。所以我又花了2个多小时切换回github..
github更快 不用在gitlab和github中跳转了。因为github的资源是最多的</description></item></channel></rss>