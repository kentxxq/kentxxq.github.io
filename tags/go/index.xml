<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on kentxxq Blog</title><link>https://kentxxq.com/tags/go/</link><description>Recent content in go on kentxxq Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Sat, 11 May 2019 16:46:00 +0000</lastBuildDate><atom:link href="https://kentxxq.com/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>我对go语言的了解</title><link>https://kentxxq.com/contents/%E6%88%91%E5%AF%B9go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BA%86%E8%A7%A3/</link><pubDate>Sat, 11 May 2019 16:46:00 +0000</pubDate><guid>https://kentxxq.com/contents/%E6%88%91%E5%AF%B9go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%BA%86%E8%A7%A3/</guid><description>一直刷知乎，有很多go语言的推崇者。不少大企业也有java转go的项目。所以就了解了一下hello world和语法相关的东西。
今天写这个文章的原因，是因为cgo。
go语言简介 我看到的go优点 性能好。不输java。 编译快，且可以生成二进制文件。你的代码部署只需要拷贝上去，执行它。这一点优于c/c++。 静态类型比动态类型更好避免低级错误。优于python/js等。 语言级别的并发。简单的语法。 我看到的go缺点 虽然有不错的标准库，但是对比python/java/js生态方面还是差一些。 nil这个东西无处不在！看过不少代码，都存在这个问题。 如果包含有cgo，不方便交叉编译且编译速度慢。 和c/c++的交互会导致速度变慢。看过一个测试，调用c/c++的包比纯go写的包要慢。这样会让go语言陷入重复造轮子的漩涡。其他语言好用的工具，都会想用go来重写。。 关于交叉编译 概念 交叉编译也就是无论我在何种环境下开发程序，我都可以打包成对应的的二进制程序。
一个纯go项目，我在mac下开发的。可以直接编译成在Windows/iOS/Android/linux下可执行的文件。
如果包含了c代码，则会变得麻烦。
遵循了POSIX标准的C/C++程序源代码，可以直接在Linux/BSD环境下用GCC编译，或者在windows下用Cygwin/MinGW编译(Cygwin、MinGW提供了跨操作系统的兼容编译)。这叫跨操作系统的编译。
常见的一些手机都是arm体系的。而你的开发是在linux之类的x86体系。那么你就需要用到arm-linux-gcc编译器，来把你的代码编译成可执行代码。这叫交叉编译/也就是跨体系的编译。
举例说明,我的项目需要连接oracle数据库。但是没有纯go的连接驱动，必须使用cgo。
纯go的交叉编译 先准备好package
go get gopkg.in/goracle.v2 下载好oracle的免安装客户端
解压以后,放到~/lib/路径下，代码就能找到它了。
sudo cp /Users/kentxxq/kent_file/instantclient_18_1/{libclntsh.dylib.18.1,libclntshcore.dylib.18.1,libons.dylib,libnnz18.dylib,libociei.dylib} ~/lib/ test.go文件代码如下
package main import ( // &amp;#34;database/sql&amp;#34; &amp;#34;fmt&amp;#34; // _ &amp;#34;gopkg.in/goracle.v2&amp;#34; ) func main() { fmt.Println(&amp;#34;Hello, World!&amp;#34;) // db, _ := sql.Open(&amp;#34;goracle&amp;#34;, &amp;#34;username/password@192.168.0.2:1521/orcl&amp;#34;) //// sql.Open在官方文档中有写，可能只是验证了字符串格式。必须使用Ping命令来测试 // if err := db.</description></item></channel></rss>