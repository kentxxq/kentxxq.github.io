<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.NET Core on kentxxq Blog</title><link>https://kentxxq.com/tags/.net-core/</link><description>Recent content in .NET Core on kentxxq Blog</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Thu, 13 Jun 2019 10:21:00 +0800</lastBuildDate><atom:link href="https://kentxxq.com/tags/.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>netCore的初步了解</title><link>https://kentxxq.com/contents/netcore%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</link><pubDate>Thu, 13 Jun 2019 10:21:00 +0800</pubDate><guid>https://kentxxq.com/contents/netcore%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</guid><description>如果让我来搭建一个web项目。那我肯定采用前后端分离。
如果要选择用什么语言来进行后端开发。快速开发我一定选择python。而需要性能且服务器数量少的时候，静态语言我会选c#。
所以就选择来初步了解一下net core以及一些语法特性。
文章中很多都只是给到了文档的链接，是因为官方文档非常详细。自己抄过来没有意义，同时链接到的地址也会有最新变化。要学好编程，官方文档是必看的。哪怕是英文版
安装所需工具 Visual Studio是宇宙第一ide这句话，大家也多多少少有过了解了。安装好以后，开发环境就弄好了。
初步搭建 看官方文档的Web API就ok。
C#开发的方便之处 models模块直接自动生成！直接可以配合linq使用。 新增控制器，直接把增删改查都做好了。只需要加入一丢丢的业务逻辑即可！ 如果使用的是Azure云服务，还可以一键上云，也太方便了。。 上面的几点，让我觉得比python开发速度还要快。
C#的委托 根据一点基础的了解。我认为委托让C#有了把函数作为参数传递的解决方案。
C#的匿名函数其实是委托的一种简写。
C#的箭头函数其实就是匿名函数的另一种表达方式。
C#的linq语法可以完全等价转换到箭头函数，也可以说是基于委托实现的。
C#的事件是特殊的委托。
我所遇到的问题 从oracle生成models Scaffold-DbContext &amp;#34;Data Source=(DESCRIPTION =(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST = db_host)(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = orcl)));User ID=kentxxq;Password=123456;&amp;#34; Oracle.EntityFrameworkCore -OutputDir Models 如果上面的命令无法识别，执行下面的操作
Install-Package Microsoft.EntityFrameworkCore.Tools 测试API 一直用postman来对后端测试。老是切换来切换去。还得自己一个一个路径来写文档。
然后发现有Swagger。神器啊！
用Nuget安装依赖Swashbuckle.AspNetCore后，在Startup.cs的ConfigureServices加入代码
services.AddSwaggerGen(c =&amp;gt; { c.SwaggerDoc(&amp;#34;v1&amp;#34;, new Info { Title = &amp;#34;My API&amp;#34;, Version = &amp;#34;v1&amp;#34; }); // 还可以给openapi添加xml注释 // 什么是xml注释？就是函数的中文名、每个参数的含义等等。PS: 1591忽略没有写xml注释的警告 // 编辑&amp;lt; project_name&amp;gt;.</description></item></channel></rss>